
32f4-SRAM-tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004024  08004024  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004024  08004024  00014024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800402c  0800402c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000070  080040a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080040a4  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a3a  00000000  00000000  0002a586  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d0  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002388e  00000000  00000000  0002d238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000781e  00000000  00000000  00050ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4465  00000000  00000000  000582e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e80  00000000  00000000  0012c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ed0 	.word	0x08003ed0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003ed0 	.word	0x08003ed0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fcc1 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f8e3 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f9a3 	bl	80008e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a2:	f000 f949 	bl	8000838 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a6:	f000 f971 	bl	800088c <MX_USB_OTG_FS_PCD_Init>
   * PB[8-15] -> A[0-7]
   * PE[2-8] -> A[8-14]
   * PE9 -> WE#
   * PE10 -> OE#
   */
  unsigned int errors = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
  unsigned int maxaddress = 32768;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("writing alternating pattern to SRAM\n\r");
 80005b4:	4864      	ldr	r0, [pc, #400]	; (8000748 <main+0x1b8>)
 80005b6:	f002 fda7 	bl	8003108 <iprintf>
	  GPIOB->MODER = (GPIOB->MODER & ~0xFFFF) | 0b0101010101010101; //make PB0-7 outputs
 80005ba:	4b64      	ldr	r3, [pc, #400]	; (800074c <main+0x1bc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	041b      	lsls	r3, r3, #16
 80005c2:	4a62      	ldr	r2, [pc, #392]	; (800074c <main+0x1bc>)
 80005c4:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80005c8:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80005cc:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(GPIOE, OE_Pin, GPIO_PIN_SET);//output enable pulled up, chip in write mode or high z depending on WE
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	485e      	ldr	r0, [pc, #376]	; (8000750 <main+0x1c0>)
 80005d6:	f000 ffc5 	bl	8001564 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, WE_Pin, GPIO_PIN_RESET);//Write enable pulled down, chip in write mode
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	485b      	ldr	r0, [pc, #364]	; (8000750 <main+0x1c0>)
 80005e2:	f000 ffbf 	bl	8001564 <HAL_GPIO_WritePin>

	  for(unsigned int address = 0; address < maxaddress; ++address){//iterate over 32768 addresses
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
 80005ea:	e038      	b.n	800065e <main+0xce>
		  uint8_t pattern;
		  if(address%2==0) pattern = 0xAA;//always write 0xAA to even addresses
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d102      	bne.n	80005fc <main+0x6c>
 80005f6:	23aa      	movs	r3, #170	; 0xaa
 80005f8:	75fb      	strb	r3, [r7, #23]
 80005fa:	e00f      	b.n	800061c <main+0x8c>
		  else{
			  if(address%3 ==0) pattern = 0xBB;//write 0xBB or 0x55 to odd addresses based on whether it can be divided by three
 80005fc:	69b9      	ldr	r1, [r7, #24]
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <main+0x1c4>)
 8000600:	fba3 2301 	umull	r2, r3, r3, r1
 8000604:	085a      	lsrs	r2, r3, #1
 8000606:	4613      	mov	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4413      	add	r3, r2
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	2a00      	cmp	r2, #0
 8000610:	d102      	bne.n	8000618 <main+0x88>
 8000612:	23bb      	movs	r3, #187	; 0xbb
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e001      	b.n	800061c <main+0x8c>
			  else pattern = 0x55;
 8000618:	2355      	movs	r3, #85	; 0x55
 800061a:	75fb      	strb	r3, [r7, #23]
		  }
		  GPIOB->ODR = pattern | ((address & 0xFF)<<8);//lower 8 bytes of PORTB is data, upper 8 bits correspond to first 8 bits of address
 800061c:	7dfa      	ldrb	r2, [r7, #23]
 800061e:	69bb      	ldr	r3, [r7, #24]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b29b      	uxth	r3, r3
 8000624:	4949      	ldr	r1, [pc, #292]	; (800074c <main+0x1bc>)
 8000626:	4313      	orrs	r3, r2
 8000628:	614b      	str	r3, [r1, #20]
		  GPIOE->ODR = (GPIOE->ODR & ~(0b1111111<<2)) | ((address & 0x7F00)>>6);//mask first 8 bits of the address, shift if by 6 to the left and write it to pe2-8
 800062a:	4b49      	ldr	r3, [pc, #292]	; (8000750 <main+0x1c0>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f423 72fe 	bic.w	r2, r3, #508	; 0x1fc
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	099b      	lsrs	r3, r3, #6
 8000636:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800063a:	4945      	ldr	r1, [pc, #276]	; (8000750 <main+0x1c0>)
 800063c:	4313      	orrs	r3, r2
 800063e:	614b      	str	r3, [r1, #20]

		  HAL_GPIO_WritePin(GPIOE, WE_Pin, GPIO_PIN_RESET);//Write enable pulled down, chip in write mode
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000646:	4842      	ldr	r0, [pc, #264]	; (8000750 <main+0x1c0>)
 8000648:	f000 ff8c 	bl	8001564 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, WE_Pin, GPIO_PIN_SET);//Write enable pulled up, chip in high z
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000652:	483f      	ldr	r0, [pc, #252]	; (8000750 <main+0x1c0>)
 8000654:	f000 ff86 	bl	8001564 <HAL_GPIO_WritePin>
	  for(unsigned int address = 0; address < maxaddress; ++address){//iterate over 32768 addresses
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	3301      	adds	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	69ba      	ldr	r2, [r7, #24]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3c2      	bcc.n	80005ec <main+0x5c>
	  }
	  HAL_GPIO_WritePin(GPIOE, WE_Pin, GPIO_PIN_SET);//Write enable pulled up, chip in high z or dout depending on OE
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800066c:	4838      	ldr	r0, [pc, #224]	; (8000750 <main+0x1c0>)
 800066e:	f000 ff79 	bl	8001564 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, OE_Pin, GPIO_PIN_SET);//output enable pulled up, chip in high z
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000678:	4835      	ldr	r0, [pc, #212]	; (8000750 <main+0x1c0>)
 800067a:	f000 ff73 	bl	8001564 <HAL_GPIO_WritePin>

	  printf("Reading pattern from SRAM\n\r");
 800067e:	4836      	ldr	r0, [pc, #216]	; (8000758 <main+0x1c8>)
 8000680:	f002 fd42 	bl	8003108 <iprintf>
	  GPIOB->MODER &=  ~0xFFFF; //make PB0-7 inputs by setting first 16 bits to 0
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <main+0x1bc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a30      	ldr	r2, [pc, #192]	; (800074c <main+0x1bc>)
 800068a:	0c1b      	lsrs	r3, r3, #16
 800068c:	041b      	lsls	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
	  for(unsigned int address = 0; address < maxaddress; ++address){//iterate over 32768 addresses
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	e04b      	b.n	800072e <main+0x19e>
		  uint8_t pattern, readval;
		  if(address%2==0) pattern = 0xAA;//always write 0xAA to even addresses
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <main+0x116>
 80006a0:	23aa      	movs	r3, #170	; 0xaa
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e00f      	b.n	80006c6 <main+0x136>
		  else{
			  if(address%3 ==0) pattern = 0xBB;//write 0xBB or 0x55 to odd addresses based on whether it can be divided by three
 80006a6:	6939      	ldr	r1, [r7, #16]
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <main+0x1c4>)
 80006aa:	fba3 2301 	umull	r2, r3, r3, r1
 80006ae:	085a      	lsrs	r2, r3, #1
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	1aca      	subs	r2, r1, r3
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	d102      	bne.n	80006c2 <main+0x132>
 80006bc:	23bb      	movs	r3, #187	; 0xbb
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <main+0x136>
			  else pattern = 0x55;
 80006c2:	2355      	movs	r3, #85	; 0x55
 80006c4:	73fb      	strb	r3, [r7, #15]
		  }
		  GPIOB->ODR = (GPIOB->ODR & ~(0xFF<<8)) | ((address & 0xFF)<<8);//write first 8 bits of athe ddress to upper 8 bits of GPIOB
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <main+0x1bc>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	491d      	ldr	r1, [pc, #116]	; (800074c <main+0x1bc>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	614b      	str	r3, [r1, #20]
		  GPIOE->ODR = (GPIOE->ODR & ~(0b1111111<<2)) | ((address & 0x7F00)>>6);//mask first 8 bits of the address, shift if by 6 to the left and write it to pe2-8
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <main+0x1c0>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f423 72fe 	bic.w	r2, r3, #508	; 0x1fc
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	099b      	lsrs	r3, r3, #6
 80006e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80006ea:	4919      	ldr	r1, [pc, #100]	; (8000750 <main+0x1c0>)
 80006ec:	4313      	orrs	r3, r2
 80006ee:	614b      	str	r3, [r1, #20]

		  HAL_GPIO_WritePin(GPIOE, OE_Pin, GPIO_PIN_RESET);//address written, put chip in dout
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4816      	ldr	r0, [pc, #88]	; (8000750 <main+0x1c0>)
 80006f8:	f000 ff34 	bl	8001564 <HAL_GPIO_WritePin>

		  readval = GPIOB->IDR & 0xFF;//store values of read from pb0-7 in a variable
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <main+0x1bc>)
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	71fb      	strb	r3, [r7, #7]
		  if(readval != pattern){
 8000702:	79fa      	ldrb	r2, [r7, #7]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	429a      	cmp	r2, r3
 8000708:	d008      	beq.n	800071c <main+0x18c>
			  ++errors;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3301      	adds	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
			  printf("Pattern mismatch at %i. Expected %u but read %u.\n\r", address, (unsigned int)pattern, (unsigned int)readval);
 8000710:	7bfa      	ldrb	r2, [r7, #15]
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	6939      	ldr	r1, [r7, #16]
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0x1cc>)
 8000718:	f002 fcf6 	bl	8003108 <iprintf>
		  }
		  HAL_GPIO_WritePin(GPIOE, OE_Pin, GPIO_PIN_SET);//output enable pulled up, chip in high z
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <main+0x1c0>)
 8000724:	f000 ff1e 	bl	8001564 <HAL_GPIO_WritePin>
	  for(unsigned int address = 0; address < maxaddress; ++address){//iterate over 32768 addresses
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	3301      	adds	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3af      	bcc.n	8000696 <main+0x106>


	  }
	  printf("Found %i errors.\n\r", errors);
 8000736:	69f9      	ldr	r1, [r7, #28]
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <main+0x1d0>)
 800073a:	f002 fce5 	bl	8003108 <iprintf>
	  HAL_Delay(5000);
 800073e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000742:	f000 fc5d 	bl	8001000 <HAL_Delay>
  {
 8000746:	e735      	b.n	80005b4 <main+0x24>
 8000748:	08003ee8 	.word	0x08003ee8
 800074c:	40020400 	.word	0x40020400
 8000750:	40021000 	.word	0x40021000
 8000754:	aaaaaaab 	.word	0xaaaaaaab
 8000758:	08003f10 	.word	0x08003f10
 800075c:	08003f2c 	.word	0x08003f2c
 8000760:	08003f60 	.word	0x08003f60

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fcc0 	bl	80030f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a21      	ldr	r2, [pc, #132]	; (8000834 <SystemClock_Config+0xd0>)
 80007ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007d8:	23a8      	movs	r3, #168	; 0xa8
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e0:	2307      	movs	r3, #7
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fff1 	bl	80017d0 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f4:	f000 f9b6 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000804:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2105      	movs	r1, #5
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fa4a 	bl	8001cb0 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000822:	f000 f99f 	bl	8000b64 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART3_UART_Init+0x48>)
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x4c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 600000;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x48>)
 8000844:	4a10      	ldr	r2, [pc, #64]	; (8000888 <MX_USART3_UART_Init+0x50>)
 8000846:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_USART3_UART_Init+0x48>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x48>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_USART3_UART_Init+0x48>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x48>)
 800085c:	220c      	movs	r2, #12
 800085e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_USART3_UART_Init+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x48>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_USART3_UART_Init+0x48>)
 800086e:	f001 fc11 	bl	8002094 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000878:	f000 f974 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000098 	.word	0x20000098
 8000884:	40004800 	.word	0x40004800
 8000888:	000927c0 	.word	0x000927c0

0800088c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2204      	movs	r2, #4
 800089c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	f000 fe61 	bl	8001596 <HAL_PCD_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f943 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000d8 	.word	0x200000d8

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	4b75      	ldr	r3, [pc, #468]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a74      	ldr	r2, [pc, #464]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	61bb      	str	r3, [r7, #24]
 8000918:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6d      	ldr	r2, [pc, #436]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b6b      	ldr	r3, [pc, #428]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a66      	ldr	r2, [pc, #408]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5f      	ldr	r2, [pc, #380]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a58      	ldr	r2, [pc, #352]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a4a      	ldr	r2, [pc, #296]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <MX_GPIO_Init+0x1f0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009c2:	2200      	movs	r2, #0
 80009c4:	f240 71fc 	movw	r1, #2044	; 0x7fc
 80009c8:	4844      	ldr	r0, [pc, #272]	; (8000adc <MX_GPIO_Init+0x1f4>)
 80009ca:	f000 fdcb 	bl	8001564 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|WE_Pin
                          |OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80009ce:	2200      	movs	r2, #0
 80009d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009d4:	4842      	ldr	r0, [pc, #264]	; (8000ae0 <MX_GPIO_Init+0x1f8>)
 80009d6:	f000 fdc5 	bl	8001564 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	4841      	ldr	r0, [pc, #260]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 80009e0:	f000 fdc0 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 WE_Pin
                           OE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009e4:	f240 73fc 	movw	r3, #2044	; 0x7fc
 80009e8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|WE_Pin
                          |OE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4837      	ldr	r0, [pc, #220]	; (8000adc <MX_GPIO_Init+0x1f4>)
 80009fe:	f000 fc07 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x200>)
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <MX_GPIO_Init+0x204>)
 8000a18:	f000 fbfa 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a1c:	2332      	movs	r3, #50	; 0x32
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a2c:	230b      	movs	r3, #11
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	482d      	ldr	r0, [pc, #180]	; (8000aec <MX_GPIO_Init+0x204>)
 8000a38:	f000 fbea 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a3c:	2386      	movs	r3, #134	; 0x86
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4c:	230b      	movs	r3, #11
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <MX_GPIO_Init+0x208>)
 8000a58:	f000 fbda 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 PB12 PB13 LD3_Pin
                           PB15 PB3 PB4 PB5
                           PB6 LD2_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a60:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0x1f8>)
 8000a76:	f000 fbcb 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000a92:	f000 fbbd 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000aaa:	f000 fbb1 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x1fc>)
 8000acc:	f000 fba0 	bl	8001210 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3730      	adds	r7, #48	; 0x30
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	10110000 	.word	0x10110000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020000 	.word	0x40020000

08000af4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8000afc:	1d39      	adds	r1, r7, #4
 8000afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b02:	2201      	movs	r2, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <__io_putchar+0x20>)
 8000b06:	f001 fb12 	bl	800212e <HAL_UART_Transmit>
  return ch;
 8000b0a:	687b      	ldr	r3, [r7, #4]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000098 	.word	0x20000098

08000b18 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  int ch = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  __HAL_UART_CLEAR_OREFLAG(&huart3);
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <__io_getchar+0x48>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__io_getchar+0x48>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]
  HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 1000);
 8000b38:	1d39      	adds	r1, r7, #4
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <__io_getchar+0x48>)
 8000b42:	f001 fb8d 	bl	8002260 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 1000);
 8000b46:	1d39      	adds	r1, r7, #4
 8000b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <__io_getchar+0x48>)
 8000b50:	f001 faed 	bl	800212e <HAL_UART_Transmit>
  return ch;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000098 	.word	0x20000098

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x6>

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_UART_MspInit+0x84>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d12c      	bne.n	8000c38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_UART_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <HAL_UART_MspInit+0x8c>)
 8000c34:	f000 faec 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	; 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004800 	.word	0x40004800
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020c00 	.word	0x40020c00

08000c4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c6c:	d13f      	bne.n	8000cee <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c8a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4815      	ldr	r0, [pc, #84]	; (8000cfc <HAL_PCD_MspInit+0xb0>)
 8000ca8:	f000 fab2 	bl	8001210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480e      	ldr	r0, [pc, #56]	; (8000cfc <HAL_PCD_MspInit+0xb0>)
 8000cc2:	f000 faa5 	bl	8001210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_PCD_MspInit+0xac>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f938 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e00a      	b.n	8000d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d66:	f7ff fed7 	bl	8000b18 <__io_getchar>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf0      	blt.n	8000d66 <_read+0x12>
	}

return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fea3 	bl	8000af4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf1      	blt.n	8000da0 <_write+0x12>
	}
	return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_close>:

int _close(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dee:	605a      	str	r2, [r3, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_isatty>:

int _isatty(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	return 1;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f002 f920 	bl	80030a4 <__errno>
 8000e64:	4602      	mov	r2, r0
 8000e66:	230c      	movs	r3, #12
 8000e68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20030000 	.word	0x20030000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	200004e8 	.word	0x200004e8

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SystemInit+0x28>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <SystemInit+0x28>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x28>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd3 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f002 f8db 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fb49 	bl	8000590 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f04:	08004034 	.word	0x08004034
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f10:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f14:	200004e8 	.word	0x200004e8

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f92f 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe0c 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f939 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f000 f90f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200004e0 	.word	0x200004e0

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200004e0 	.word	0x200004e0

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff5c 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb0 	bl	8001164 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e177      	b.n	800151c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8166 	bne.w	8001516 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d00b      	beq.n	800126a <HAL_GPIO_Init+0x5a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125e:	2b11      	cmp	r3, #17
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b12      	cmp	r3, #18
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0xfc>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b12      	cmp	r3, #18
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80c0 	beq.w	8001516 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b65      	ldr	r3, [pc, #404]	; (8001530 <HAL_GPIO_Init+0x320>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a64      	ldr	r2, [pc, #400]	; (8001530 <HAL_GPIO_Init+0x320>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_GPIO_Init+0x320>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a60      	ldr	r2, [pc, #384]	; (8001534 <HAL_GPIO_Init+0x324>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_GPIO_Init+0x328>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d037      	beq.n	800144e <HAL_GPIO_Init+0x23e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a56      	ldr	r2, [pc, #344]	; (800153c <HAL_GPIO_Init+0x32c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d031      	beq.n	800144a <HAL_GPIO_Init+0x23a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a55      	ldr	r2, [pc, #340]	; (8001540 <HAL_GPIO_Init+0x330>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d02b      	beq.n	8001446 <HAL_GPIO_Init+0x236>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a54      	ldr	r2, [pc, #336]	; (8001544 <HAL_GPIO_Init+0x334>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x232>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_GPIO_Init+0x338>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x22e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_GPIO_Init+0x33c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x22a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_GPIO_Init+0x340>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x226>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_GPIO_Init+0x344>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x222>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x348>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x21e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_GPIO_Init+0x34c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x21a>
 8001426:	2309      	movs	r3, #9
 8001428:	e012      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800142a:	230a      	movs	r3, #10
 800142c:	e010      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800142e:	2308      	movs	r3, #8
 8001430:	e00e      	b.n	8001450 <HAL_GPIO_Init+0x240>
 8001432:	2307      	movs	r3, #7
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x240>
 8001436:	2306      	movs	r3, #6
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x240>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x240>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x240>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4934      	ldr	r1, [pc, #208]	; (8001534 <HAL_GPIO_Init+0x324>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001492:	4a33      	ldr	r2, [pc, #204]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x350>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014bc:	4a28      	ldr	r2, [pc, #160]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x350>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_GPIO_Init+0x350>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae84 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	3724      	adds	r7, #36	; 0x24
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40021400 	.word	0x40021400
 8001550:	40021800 	.word	0x40021800
 8001554:	40021c00 	.word	0x40021c00
 8001558:	40022000 	.word	0x40022000
 800155c:	40022400 	.word	0x40022400
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b08f      	sub	sp, #60	; 0x3c
 800159a:	af0a      	add	r7, sp, #40	; 0x28
 800159c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e10f      	b.n	80017c8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fb42 	bl	8000c4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 fb07 	bl	8002bfa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	687e      	ldr	r6, [r7, #4]
 80015f4:	466d      	mov	r5, sp
 80015f6:	f106 0410 	add.w	r4, r6, #16
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001606:	e885 0003 	stmia.w	r5, {r0, r1}
 800160a:	1d33      	adds	r3, r6, #4
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	6838      	ldr	r0, [r7, #0]
 8001610:	f001 fa92 	bl	8002b38 <USB_CoreInit>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2202      	movs	r2, #2
 800161e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0d0      	b.n	80017c8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f001 faf5 	bl	8002c1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e04a      	b.n	80016ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	333d      	adds	r3, #61	; 0x3d
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	333c      	adds	r3, #60	; 0x3c
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	b298      	uxth	r0, r3
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3342      	adds	r3, #66	; 0x42
 8001674:	4602      	mov	r2, r0
 8001676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3344      	adds	r3, #68	; 0x44
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	3348      	adds	r3, #72	; 0x48
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3350      	adds	r3, #80	; 0x50
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	3301      	adds	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3af      	bcc.n	8001638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e044      	b.n	8001768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3b5      	bcc.n	80016de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	687e      	ldr	r6, [r7, #4]
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d33      	adds	r3, r6, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f001 fa6b 	bl	8002c70 <USB_DevInit>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e00d      	b.n	80017c8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 fc1a 	bl	8002ffa <USB_DevDisconnect>

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e25b      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d075      	beq.n	80018da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ee:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d00c      	beq.n	8001814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fa:	4ba0      	ldr	r3, [pc, #640]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001802:	2b08      	cmp	r3, #8
 8001804:	d112      	bne.n	800182c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001806:	4b9d      	ldr	r3, [pc, #628]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4b99      	ldr	r3, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d05b      	beq.n	80018d8 <HAL_RCC_OscConfig+0x108>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d157      	bne.n	80018d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e236      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d106      	bne.n	8001844 <HAL_RCC_OscConfig+0x74>
 8001836:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a90      	ldr	r2, [pc, #576]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e01d      	b.n	8001880 <HAL_RCC_OscConfig+0xb0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x98>
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a8a      	ldr	r2, [pc, #552]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a87      	ldr	r2, [pc, #540]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0xb0>
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a83      	ldr	r2, [pc, #524]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a80      	ldr	r2, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fbae 	bl	8000fe8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fbaa 	bl	8000fe8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1fb      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xc0>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb9a 	bl	8000fe8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fb96 	bl	8000fe8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1e7      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ca:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0xe8>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00b      	beq.n	800190a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f2:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d11c      	bne.n	8001938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d116      	bne.n	8001938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x152>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e1bb      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b56      	ldr	r3, [pc, #344]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4952      	ldr	r1, [pc, #328]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001936:	e03a      	b.n	80019ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d020      	beq.n	8001982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001940:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <HAL_RCC_OscConfig+0x2b0>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7ff fb4f 	bl	8000fe8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff fb4b 	bl	8000fe8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e19c      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4940      	ldr	r1, [pc, #256]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x2b0>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fb2e 	bl	8000fe8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f7ff fb2a 	bl	8000fe8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e17b      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d030      	beq.n	8001a1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d016      	beq.n	80019f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_RCC_OscConfig+0x2b4>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fb0e 	bl	8000fe8 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d0:	f7ff fb0a 	bl	8000fe8 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e15b      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x200>
 80019ee:	e015      	b.n	8001a1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_OscConfig+0x2b4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f6:	f7ff faf7 	bl	8000fe8 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7ff faf3 	bl	8000fe8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e144      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80a0 	beq.w	8001b6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x2b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d121      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_RCC_OscConfig+0x2b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_RCC_OscConfig+0x2b8>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff fab9 	bl	8000fe8 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e011      	b.n	8001a9e <HAL_RCC_OscConfig+0x2ce>
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470000 	.word	0x42470000
 8001a84:	42470e80 	.word	0x42470e80
 8001a88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8c:	f7ff faac 	bl	8000fe8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0fd      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9e:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_RCC_OscConfig+0x4d4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x2f0>
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	e01c      	b.n	8001afa <HAL_RCC_OscConfig+0x32a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d10c      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x312>
 8001ac8:	4b77      	ldr	r3, [pc, #476]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4a76      	ldr	r2, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ace:	f043 0304 	orr.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad4:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a73      	ldr	r2, [pc, #460]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e00b      	b.n	8001afa <HAL_RCC_OscConfig+0x32a>
 8001ae2:	4b71      	ldr	r3, [pc, #452]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	4a70      	ldr	r2, [pc, #448]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6713      	str	r3, [r2, #112]	; 0x70
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af2:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d015      	beq.n	8001b2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa71 	bl	8000fe8 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fa6d 	bl	8000fe8 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0bc      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b20:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ee      	beq.n	8001b0a <HAL_RCC_OscConfig+0x33a>
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fa5b 	bl	8000fe8 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b36:	f7ff fa57 	bl	8000fe8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0a6      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4c:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8092 	beq.w	8001c98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b74:	4b4c      	ldr	r3, [pc, #304]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d05c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d141      	bne.n	8001c0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fa2b 	bl	8000fe8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b96:	f7ff fa27 	bl	8000fe8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e078      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	019b      	lsls	r3, r3, #6
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	061b      	lsls	r3, r3, #24
 8001bd8:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bde:	4b33      	ldr	r3, [pc, #204]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa00 	bl	8000fe8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f9fc 	bl	8000fe8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e04d      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x41c>
 8001c0a:	e045      	b.n	8001c98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff f9e9 	bl	8000fe8 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff f9e5 	bl	8000fe8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e036      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x44a>
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e029      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_RCC_OscConfig+0x4d8>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10d      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470060 	.word	0x42470060

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cc      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d90c      	bls.n	8001cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e067      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff f922 	bl	8000fe8 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff f91e 	bl	8000fe8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d20c      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f882 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08003f74 	.word	0x08003f74
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d007      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x32>
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x38>
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f040 80b4 	bne.w	8002010 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ea8:	4b5e      	ldr	r3, [pc, #376]	; (8002024 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001eaa:	60bb      	str	r3, [r7, #8]
       break;
 8001eac:	e0b3      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eae:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001eb0:	60bb      	str	r3, [r7, #8]
      break;
 8001eb2:	e0b0      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ebc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d04a      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eca:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	099b      	lsrs	r3, r3, #6
 8001ed0:	f04f 0400 	mov.w	r4, #0
 8001ed4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	ea03 0501 	and.w	r5, r3, r1
 8001ee0:	ea04 0602 	and.w	r6, r4, r2
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4632      	mov	r2, r6
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f04f 0400 	mov.w	r4, #0
 8001ef0:	0154      	lsls	r4, r2, #5
 8001ef2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ef6:	014b      	lsls	r3, r1, #5
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4622      	mov	r2, r4
 8001efc:	1b49      	subs	r1, r1, r5
 8001efe:	eb62 0206 	sbc.w	r2, r2, r6
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f04f 0400 	mov.w	r4, #0
 8001f0a:	0194      	lsls	r4, r2, #6
 8001f0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f10:	018b      	lsls	r3, r1, #6
 8001f12:	1a5b      	subs	r3, r3, r1
 8001f14:	eb64 0402 	sbc.w	r4, r4, r2
 8001f18:	f04f 0100 	mov.w	r1, #0
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	00e2      	lsls	r2, r4, #3
 8001f22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f26:	00d9      	lsls	r1, r3, #3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4614      	mov	r4, r2
 8001f2c:	195b      	adds	r3, r3, r5
 8001f2e:	eb44 0406 	adc.w	r4, r4, r6
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	0262      	lsls	r2, r4, #9
 8001f3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f40:	0259      	lsls	r1, r3, #9
 8001f42:	460b      	mov	r3, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	4621      	mov	r1, r4
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f04f 0400 	mov.w	r4, #0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	f7fe f99c 	bl	8000290 <__aeabi_uldivmod>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e049      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	4b2f      	ldr	r3, [pc, #188]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	f04f 0400 	mov.w	r4, #0
 8001f6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	ea03 0501 	and.w	r5, r3, r1
 8001f76:	ea04 0602 	and.w	r6, r4, r2
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	4632      	mov	r2, r6
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	f04f 0400 	mov.w	r4, #0
 8001f86:	0154      	lsls	r4, r2, #5
 8001f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f8c:	014b      	lsls	r3, r1, #5
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4622      	mov	r2, r4
 8001f92:	1b49      	subs	r1, r1, r5
 8001f94:	eb62 0206 	sbc.w	r2, r2, r6
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	0194      	lsls	r4, r2, #6
 8001fa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fa6:	018b      	lsls	r3, r1, #6
 8001fa8:	1a5b      	subs	r3, r3, r1
 8001faa:	eb64 0402 	sbc.w	r4, r4, r2
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	00e2      	lsls	r2, r4, #3
 8001fb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fbc:	00d9      	lsls	r1, r3, #3
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	195b      	adds	r3, r3, r5
 8001fc4:	eb44 0406 	adc.w	r4, r4, r6
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	02a2      	lsls	r2, r4, #10
 8001fd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fd6:	0299      	lsls	r1, r3, #10
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4621      	mov	r1, r4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f04f 0400 	mov.w	r4, #0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4623      	mov	r3, r4
 8001fea:	f7fe f951 	bl	8000290 <__aeabi_uldivmod>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	3301      	adds	r3, #1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	60bb      	str	r3, [r7, #8]
      break;
 800200e:	e002      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002012:	60bb      	str	r3, [r7, #8]
      break;
 8002014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002016:	68bb      	ldr	r3, [r7, #8]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	00f42400 	.word	0x00f42400
 8002028:	007a1200 	.word	0x007a1200

0800202c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_RCC_GetHCLKFreq+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000

08002044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002048:	f7ff fff0 	bl	800202c <HAL_RCC_GetHCLKFreq>
 800204c:	4601      	mov	r1, r0
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0a9b      	lsrs	r3, r3, #10
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	08003f84 	.word	0x08003f84

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002070:	f7ff ffdc 	bl	800202c <HAL_RCC_GetHCLKFreq>
 8002074:	4601      	mov	r1, r0
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0b5b      	lsrs	r3, r3, #13
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800
 8002090:	08003f84 	.word	0x08003f84

08002094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e03f      	b.n	8002126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fd7e 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f9b1 	bl	8002440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800210c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b088      	sub	sp, #32
 8002132:	af02      	add	r7, sp, #8
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	f040 8083 	bne.w	8002256 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_UART_Transmit+0x2e>
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e07b      	b.n	8002258 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_UART_Transmit+0x40>
 800216a:	2302      	movs	r3, #2
 800216c:	e074      	b.n	8002258 <HAL_UART_Transmit+0x12a>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002184:	f7fe ff30 	bl	8000fe8 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	88fa      	ldrh	r2, [r7, #6]
 800218e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	88fa      	ldrh	r2, [r7, #6]
 8002194:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800219e:	e042      	b.n	8002226 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b6:	d122      	bne.n	80021fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2200      	movs	r2, #0
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f8f2 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e042      	b.n	8002258 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3302      	adds	r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	e017      	b.n	8002226 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3301      	adds	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	e013      	b.n	8002226 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f8cf 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e01f      	b.n	8002258 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	60ba      	str	r2, [r7, #8]
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1b7      	bne.n	80021a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2200      	movs	r2, #0
 8002238:	2140      	movs	r1, #64	; 0x40
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f8b6 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e006      	b.n	8002258 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	4613      	mov	r3, r2
 800226e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	f040 8090 	bne.w	80023a2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_UART_Receive+0x2e>
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e088      	b.n	80023a4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_UART_Receive+0x40>
 800229c:	2302      	movs	r3, #2
 800229e:	e081      	b.n	80023a4 <HAL_UART_Receive+0x144>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2222      	movs	r2, #34	; 0x22
 80022b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022b6:	f7fe fe97 	bl	8000fe8 <HAL_GetTick>
 80022ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	88fa      	ldrh	r2, [r7, #6]
 80022c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	88fa      	ldrh	r2, [r7, #6]
 80022c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022d0:	e05c      	b.n	800238c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e8:	d12b      	bne.n	8002342 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2120      	movs	r1, #32
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f859 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e04f      	b.n	80023a4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10c      	bne.n	800232a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231c:	b29a      	uxth	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3302      	adds	r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	e030      	b.n	800238c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	b29a      	uxth	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	e024      	b.n	800238c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2120      	movs	r1, #32
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f82d 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e023      	b.n	80023a4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	60ba      	str	r2, [r7, #8]
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e00a      	b.n	800238c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c59      	adds	r1, r3, #1
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002390:	b29b      	uxth	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d19d      	bne.n	80022d2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e000      	b.n	80023a4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
  }
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023bc:	e02c      	b.n	8002418 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c4:	d028      	beq.n	8002418 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d007      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x30>
 80023cc:	f7fe fe0c 	bl	8000fe8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d21d      	bcs.n	8002418 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e00f      	b.n	8002438 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	429a      	cmp	r2, r3
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	429a      	cmp	r2, r3
 8002434:	d0c3      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	431a      	orrs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002482:	f023 030c 	bic.w	r3, r3, #12
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	430b      	orrs	r3, r1
 800248e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	f040 818b 	bne.w	80027c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4ac1      	ldr	r2, [pc, #772]	; (80027bc <UART_SetConfig+0x37c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d005      	beq.n	80024c8 <UART_SetConfig+0x88>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4abf      	ldr	r2, [pc, #764]	; (80027c0 <UART_SetConfig+0x380>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f040 80bd 	bne.w	8002642 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024c8:	f7ff fdd0 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 80024cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	461d      	mov	r5, r3
 80024d2:	f04f 0600 	mov.w	r6, #0
 80024d6:	46a8      	mov	r8, r5
 80024d8:	46b1      	mov	r9, r6
 80024da:	eb18 0308 	adds.w	r3, r8, r8
 80024de:	eb49 0409 	adc.w	r4, r9, r9
 80024e2:	4698      	mov	r8, r3
 80024e4:	46a1      	mov	r9, r4
 80024e6:	eb18 0805 	adds.w	r8, r8, r5
 80024ea:	eb49 0906 	adc.w	r9, r9, r6
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002502:	4688      	mov	r8, r1
 8002504:	4691      	mov	r9, r2
 8002506:	eb18 0005 	adds.w	r0, r8, r5
 800250a:	eb49 0106 	adc.w	r1, r9, r6
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	461d      	mov	r5, r3
 8002514:	f04f 0600 	mov.w	r6, #0
 8002518:	196b      	adds	r3, r5, r5
 800251a:	eb46 0406 	adc.w	r4, r6, r6
 800251e:	461a      	mov	r2, r3
 8002520:	4623      	mov	r3, r4
 8002522:	f7fd feb5 	bl	8000290 <__aeabi_uldivmod>
 8002526:	4603      	mov	r3, r0
 8002528:	460c      	mov	r4, r1
 800252a:	461a      	mov	r2, r3
 800252c:	4ba5      	ldr	r3, [pc, #660]	; (80027c4 <UART_SetConfig+0x384>)
 800252e:	fba3 2302 	umull	r2, r3, r3, r2
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	461d      	mov	r5, r3
 800253c:	f04f 0600 	mov.w	r6, #0
 8002540:	46a9      	mov	r9, r5
 8002542:	46b2      	mov	sl, r6
 8002544:	eb19 0309 	adds.w	r3, r9, r9
 8002548:	eb4a 040a 	adc.w	r4, sl, sl
 800254c:	4699      	mov	r9, r3
 800254e:	46a2      	mov	sl, r4
 8002550:	eb19 0905 	adds.w	r9, r9, r5
 8002554:	eb4a 0a06 	adc.w	sl, sl, r6
 8002558:	f04f 0100 	mov.w	r1, #0
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800256c:	4689      	mov	r9, r1
 800256e:	4692      	mov	sl, r2
 8002570:	eb19 0005 	adds.w	r0, r9, r5
 8002574:	eb4a 0106 	adc.w	r1, sl, r6
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	461d      	mov	r5, r3
 800257e:	f04f 0600 	mov.w	r6, #0
 8002582:	196b      	adds	r3, r5, r5
 8002584:	eb46 0406 	adc.w	r4, r6, r6
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	f7fd fe80 	bl	8000290 <__aeabi_uldivmod>
 8002590:	4603      	mov	r3, r0
 8002592:	460c      	mov	r4, r1
 8002594:	461a      	mov	r2, r3
 8002596:	4b8b      	ldr	r3, [pc, #556]	; (80027c4 <UART_SetConfig+0x384>)
 8002598:	fba3 1302 	umull	r1, r3, r3, r2
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	2164      	movs	r1, #100	; 0x64
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	3332      	adds	r3, #50	; 0x32
 80025aa:	4a86      	ldr	r2, [pc, #536]	; (80027c4 <UART_SetConfig+0x384>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	095b      	lsrs	r3, r3, #5
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025b8:	4498      	add	r8, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	461d      	mov	r5, r3
 80025be:	f04f 0600 	mov.w	r6, #0
 80025c2:	46a9      	mov	r9, r5
 80025c4:	46b2      	mov	sl, r6
 80025c6:	eb19 0309 	adds.w	r3, r9, r9
 80025ca:	eb4a 040a 	adc.w	r4, sl, sl
 80025ce:	4699      	mov	r9, r3
 80025d0:	46a2      	mov	sl, r4
 80025d2:	eb19 0905 	adds.w	r9, r9, r5
 80025d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ee:	4689      	mov	r9, r1
 80025f0:	4692      	mov	sl, r2
 80025f2:	eb19 0005 	adds.w	r0, r9, r5
 80025f6:	eb4a 0106 	adc.w	r1, sl, r6
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	461d      	mov	r5, r3
 8002600:	f04f 0600 	mov.w	r6, #0
 8002604:	196b      	adds	r3, r5, r5
 8002606:	eb46 0406 	adc.w	r4, r6, r6
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	f7fd fe3f 	bl	8000290 <__aeabi_uldivmod>
 8002612:	4603      	mov	r3, r0
 8002614:	460c      	mov	r4, r1
 8002616:	461a      	mov	r2, r3
 8002618:	4b6a      	ldr	r3, [pc, #424]	; (80027c4 <UART_SetConfig+0x384>)
 800261a:	fba3 1302 	umull	r1, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2164      	movs	r1, #100	; 0x64
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <UART_SetConfig+0x384>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 0207 	and.w	r2, r3, #7
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4442      	add	r2, r8
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	e26f      	b.n	8002b22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002642:	f7ff fcff 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002646:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	461d      	mov	r5, r3
 800264c:	f04f 0600 	mov.w	r6, #0
 8002650:	46a8      	mov	r8, r5
 8002652:	46b1      	mov	r9, r6
 8002654:	eb18 0308 	adds.w	r3, r8, r8
 8002658:	eb49 0409 	adc.w	r4, r9, r9
 800265c:	4698      	mov	r8, r3
 800265e:	46a1      	mov	r9, r4
 8002660:	eb18 0805 	adds.w	r8, r8, r5
 8002664:	eb49 0906 	adc.w	r9, r9, r6
 8002668:	f04f 0100 	mov.w	r1, #0
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002674:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002678:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800267c:	4688      	mov	r8, r1
 800267e:	4691      	mov	r9, r2
 8002680:	eb18 0005 	adds.w	r0, r8, r5
 8002684:	eb49 0106 	adc.w	r1, r9, r6
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	461d      	mov	r5, r3
 800268e:	f04f 0600 	mov.w	r6, #0
 8002692:	196b      	adds	r3, r5, r5
 8002694:	eb46 0406 	adc.w	r4, r6, r6
 8002698:	461a      	mov	r2, r3
 800269a:	4623      	mov	r3, r4
 800269c:	f7fd fdf8 	bl	8000290 <__aeabi_uldivmod>
 80026a0:	4603      	mov	r3, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <UART_SetConfig+0x384>)
 80026a8:	fba3 2302 	umull	r2, r3, r3, r2
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	461d      	mov	r5, r3
 80026b6:	f04f 0600 	mov.w	r6, #0
 80026ba:	46a9      	mov	r9, r5
 80026bc:	46b2      	mov	sl, r6
 80026be:	eb19 0309 	adds.w	r3, r9, r9
 80026c2:	eb4a 040a 	adc.w	r4, sl, sl
 80026c6:	4699      	mov	r9, r3
 80026c8:	46a2      	mov	sl, r4
 80026ca:	eb19 0905 	adds.w	r9, r9, r5
 80026ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80026d2:	f04f 0100 	mov.w	r1, #0
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026e6:	4689      	mov	r9, r1
 80026e8:	4692      	mov	sl, r2
 80026ea:	eb19 0005 	adds.w	r0, r9, r5
 80026ee:	eb4a 0106 	adc.w	r1, sl, r6
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	461d      	mov	r5, r3
 80026f8:	f04f 0600 	mov.w	r6, #0
 80026fc:	196b      	adds	r3, r5, r5
 80026fe:	eb46 0406 	adc.w	r4, r6, r6
 8002702:	461a      	mov	r2, r3
 8002704:	4623      	mov	r3, r4
 8002706:	f7fd fdc3 	bl	8000290 <__aeabi_uldivmod>
 800270a:	4603      	mov	r3, r0
 800270c:	460c      	mov	r4, r1
 800270e:	461a      	mov	r2, r3
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <UART_SetConfig+0x384>)
 8002712:	fba3 1302 	umull	r1, r3, r3, r2
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2164      	movs	r1, #100	; 0x64
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	3332      	adds	r3, #50	; 0x32
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <UART_SetConfig+0x384>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002732:	4498      	add	r8, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	461d      	mov	r5, r3
 8002738:	f04f 0600 	mov.w	r6, #0
 800273c:	46a9      	mov	r9, r5
 800273e:	46b2      	mov	sl, r6
 8002740:	eb19 0309 	adds.w	r3, r9, r9
 8002744:	eb4a 040a 	adc.w	r4, sl, sl
 8002748:	4699      	mov	r9, r3
 800274a:	46a2      	mov	sl, r4
 800274c:	eb19 0905 	adds.w	r9, r9, r5
 8002750:	eb4a 0a06 	adc.w	sl, sl, r6
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002760:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002764:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002768:	4689      	mov	r9, r1
 800276a:	4692      	mov	sl, r2
 800276c:	eb19 0005 	adds.w	r0, r9, r5
 8002770:	eb4a 0106 	adc.w	r1, sl, r6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	461d      	mov	r5, r3
 800277a:	f04f 0600 	mov.w	r6, #0
 800277e:	196b      	adds	r3, r5, r5
 8002780:	eb46 0406 	adc.w	r4, r6, r6
 8002784:	461a      	mov	r2, r3
 8002786:	4623      	mov	r3, r4
 8002788:	f7fd fd82 	bl	8000290 <__aeabi_uldivmod>
 800278c:	4603      	mov	r3, r0
 800278e:	460c      	mov	r4, r1
 8002790:	461a      	mov	r2, r3
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <UART_SetConfig+0x384>)
 8002794:	fba3 1302 	umull	r1, r3, r3, r2
 8002798:	095b      	lsrs	r3, r3, #5
 800279a:	2164      	movs	r1, #100	; 0x64
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	3332      	adds	r3, #50	; 0x32
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <UART_SetConfig+0x384>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f003 0207 	and.w	r2, r3, #7
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4442      	add	r2, r8
 80027b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027ba:	e1b2      	b.n	8002b22 <UART_SetConfig+0x6e2>
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40011400 	.word	0x40011400
 80027c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4ad7      	ldr	r2, [pc, #860]	; (8002b2c <UART_SetConfig+0x6ec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d005      	beq.n	80027de <UART_SetConfig+0x39e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4ad6      	ldr	r2, [pc, #856]	; (8002b30 <UART_SetConfig+0x6f0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	f040 80d1 	bne.w	8002980 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027de:	f7ff fc45 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 80027e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	469a      	mov	sl, r3
 80027e8:	f04f 0b00 	mov.w	fp, #0
 80027ec:	46d0      	mov	r8, sl
 80027ee:	46d9      	mov	r9, fp
 80027f0:	eb18 0308 	adds.w	r3, r8, r8
 80027f4:	eb49 0409 	adc.w	r4, r9, r9
 80027f8:	4698      	mov	r8, r3
 80027fa:	46a1      	mov	r9, r4
 80027fc:	eb18 080a 	adds.w	r8, r8, sl
 8002800:	eb49 090b 	adc.w	r9, r9, fp
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002810:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002814:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002818:	4688      	mov	r8, r1
 800281a:	4691      	mov	r9, r2
 800281c:	eb1a 0508 	adds.w	r5, sl, r8
 8002820:	eb4b 0609 	adc.w	r6, fp, r9
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4619      	mov	r1, r3
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	0094      	lsls	r4, r2, #2
 8002838:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800283c:	008b      	lsls	r3, r1, #2
 800283e:	461a      	mov	r2, r3
 8002840:	4623      	mov	r3, r4
 8002842:	4628      	mov	r0, r5
 8002844:	4631      	mov	r1, r6
 8002846:	f7fd fd23 	bl	8000290 <__aeabi_uldivmod>
 800284a:	4603      	mov	r3, r0
 800284c:	460c      	mov	r4, r1
 800284e:	461a      	mov	r2, r3
 8002850:	4bb8      	ldr	r3, [pc, #736]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002852:	fba3 2302 	umull	r2, r3, r3, r2
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	469b      	mov	fp, r3
 8002860:	f04f 0c00 	mov.w	ip, #0
 8002864:	46d9      	mov	r9, fp
 8002866:	46e2      	mov	sl, ip
 8002868:	eb19 0309 	adds.w	r3, r9, r9
 800286c:	eb4a 040a 	adc.w	r4, sl, sl
 8002870:	4699      	mov	r9, r3
 8002872:	46a2      	mov	sl, r4
 8002874:	eb19 090b 	adds.w	r9, r9, fp
 8002878:	eb4a 0a0c 	adc.w	sl, sl, ip
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002888:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800288c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002890:	4689      	mov	r9, r1
 8002892:	4692      	mov	sl, r2
 8002894:	eb1b 0509 	adds.w	r5, fp, r9
 8002898:	eb4c 060a 	adc.w	r6, ip, sl
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	f04f 0400 	mov.w	r4, #0
 80028ae:	0094      	lsls	r4, r2, #2
 80028b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028b4:	008b      	lsls	r3, r1, #2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4623      	mov	r3, r4
 80028ba:	4628      	mov	r0, r5
 80028bc:	4631      	mov	r1, r6
 80028be:	f7fd fce7 	bl	8000290 <__aeabi_uldivmod>
 80028c2:	4603      	mov	r3, r0
 80028c4:	460c      	mov	r4, r1
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b9a      	ldr	r3, [pc, #616]	; (8002b34 <UART_SetConfig+0x6f4>)
 80028ca:	fba3 1302 	umull	r1, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2164      	movs	r1, #100	; 0x64
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	3332      	adds	r3, #50	; 0x32
 80028dc:	4a95      	ldr	r2, [pc, #596]	; (8002b34 <UART_SetConfig+0x6f4>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e8:	4498      	add	r8, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	469b      	mov	fp, r3
 80028ee:	f04f 0c00 	mov.w	ip, #0
 80028f2:	46d9      	mov	r9, fp
 80028f4:	46e2      	mov	sl, ip
 80028f6:	eb19 0309 	adds.w	r3, r9, r9
 80028fa:	eb4a 040a 	adc.w	r4, sl, sl
 80028fe:	4699      	mov	r9, r3
 8002900:	46a2      	mov	sl, r4
 8002902:	eb19 090b 	adds.w	r9, r9, fp
 8002906:	eb4a 0a0c 	adc.w	sl, sl, ip
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002916:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800291a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800291e:	4689      	mov	r9, r1
 8002920:	4692      	mov	sl, r2
 8002922:	eb1b 0509 	adds.w	r5, fp, r9
 8002926:	eb4c 060a 	adc.w	r6, ip, sl
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	0094      	lsls	r4, r2, #2
 800293e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002942:	008b      	lsls	r3, r1, #2
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	4628      	mov	r0, r5
 800294a:	4631      	mov	r1, r6
 800294c:	f7fd fca0 	bl	8000290 <__aeabi_uldivmod>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	461a      	mov	r2, r3
 8002956:	4b77      	ldr	r3, [pc, #476]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	; 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	3332      	adds	r3, #50	; 0x32
 800296a:	4a72      	ldr	r2, [pc, #456]	; (8002b34 <UART_SetConfig+0x6f4>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4442      	add	r2, r8
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	e0d0      	b.n	8002b22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002980:	f7ff fb60 	bl	8002044 <HAL_RCC_GetPCLK1Freq>
 8002984:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	469a      	mov	sl, r3
 800298a:	f04f 0b00 	mov.w	fp, #0
 800298e:	46d0      	mov	r8, sl
 8002990:	46d9      	mov	r9, fp
 8002992:	eb18 0308 	adds.w	r3, r8, r8
 8002996:	eb49 0409 	adc.w	r4, r9, r9
 800299a:	4698      	mov	r8, r3
 800299c:	46a1      	mov	r9, r4
 800299e:	eb18 080a 	adds.w	r8, r8, sl
 80029a2:	eb49 090b 	adc.w	r9, r9, fp
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029ba:	4688      	mov	r8, r1
 80029bc:	4691      	mov	r9, r2
 80029be:	eb1a 0508 	adds.w	r5, sl, r8
 80029c2:	eb4b 0609 	adc.w	r6, fp, r9
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	f04f 0400 	mov.w	r4, #0
 80029d8:	0094      	lsls	r4, r2, #2
 80029da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029de:	008b      	lsls	r3, r1, #2
 80029e0:	461a      	mov	r2, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	4628      	mov	r0, r5
 80029e6:	4631      	mov	r1, r6
 80029e8:	f7fd fc52 	bl	8000290 <__aeabi_uldivmod>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <UART_SetConfig+0x6f4>)
 80029f4:	fba3 2302 	umull	r2, r3, r3, r2
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	469b      	mov	fp, r3
 8002a02:	f04f 0c00 	mov.w	ip, #0
 8002a06:	46d9      	mov	r9, fp
 8002a08:	46e2      	mov	sl, ip
 8002a0a:	eb19 0309 	adds.w	r3, r9, r9
 8002a0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a12:	4699      	mov	r9, r3
 8002a14:	46a2      	mov	sl, r4
 8002a16:	eb19 090b 	adds.w	r9, r9, fp
 8002a1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a32:	4689      	mov	r9, r1
 8002a34:	4692      	mov	sl, r2
 8002a36:	eb1b 0509 	adds.w	r5, fp, r9
 8002a3a:	eb4c 060a 	adc.w	r6, ip, sl
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	0094      	lsls	r4, r2, #2
 8002a52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a56:	008b      	lsls	r3, r1, #2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	4628      	mov	r0, r5
 8002a5e:	4631      	mov	r1, r6
 8002a60:	f7fd fc16 	bl	8000290 <__aeabi_uldivmod>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2164      	movs	r1, #100	; 0x64
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	; 0x32
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a8a:	4498      	add	r8, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	469b      	mov	fp, r3
 8002a90:	f04f 0c00 	mov.w	ip, #0
 8002a94:	46d9      	mov	r9, fp
 8002a96:	46e2      	mov	sl, ip
 8002a98:	eb19 0309 	adds.w	r3, r9, r9
 8002a9c:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	46a2      	mov	sl, r4
 8002aa4:	eb19 090b 	adds.w	r9, r9, fp
 8002aa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aac:	f04f 0100 	mov.w	r1, #0
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002abc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac0:	4689      	mov	r9, r1
 8002ac2:	4692      	mov	sl, r2
 8002ac4:	eb1b 0509 	adds.w	r5, fp, r9
 8002ac8:	eb4c 060a 	adc.w	r6, ip, sl
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	0094      	lsls	r4, r2, #2
 8002ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ae4:	008b      	lsls	r3, r1, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4623      	mov	r3, r4
 8002aea:	4628      	mov	r0, r5
 8002aec:	4631      	mov	r1, r6
 8002aee:	f7fd fbcf 	bl	8000290 <__aeabi_uldivmod>
 8002af2:	4603      	mov	r3, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002afa:	fba3 1302 	umull	r1, r3, r3, r2
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2164      	movs	r1, #100	; 0x64
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	3332      	adds	r3, #50	; 0x32
 8002b0c:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <UART_SetConfig+0x6f4>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4442      	add	r2, r8
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e7ff      	b.n	8002b22 <UART_SetConfig+0x6e2>
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2c:	40011000 	.word	0x40011000
 8002b30:	40011400 	.word	0x40011400
 8002b34:	51eb851f 	.word	0x51eb851f

08002b38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b38:	b084      	sub	sp, #16
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	f107 001c 	add.w	r0, r7, #28
 8002b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d122      	bne.n	8002b96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa56 	bl	800303c <USB_CoreReset>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e01a      	b.n	8002bcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fa4a 	bl	800303c <USB_CoreReset>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bbe:	e005      	b.n	8002bcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10b      	bne.n	8002bea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f043 0206 	orr.w	r2, r3, #6
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bf6:	b004      	add	sp, #16
 8002bf8:	4770      	bx	lr

08002bfa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d106      	bne.n	8002c48 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e00b      	b.n	8002c60 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e001      	b.n	8002c60 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e003      	b.n	8002c68 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c60:	2032      	movs	r0, #50	; 0x32
 8002c62:	f7fe f9cd 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c70:	b084      	sub	sp, #16
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e009      	b.n	8002ca4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	3340      	adds	r3, #64	; 0x40
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0e      	cmp	r3, #14
 8002ca8:	d9f2      	bls.n	8002c90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11c      	bne.n	8002cea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce8:	e00b      	b.n	8002d02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d14:	4619      	mov	r1, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	680b      	ldr	r3, [r1, #0]
 8002d20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10c      	bne.n	8002d42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f949 	bl	8002fc8 <USB_SetDevSpeed>
 8002d36:	e008      	b.n	8002d4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d38:	2101      	movs	r1, #1
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f944 	bl	8002fc8 <USB_SetDevSpeed>
 8002d40:	e003      	b.n	8002d4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d42:	2103      	movs	r1, #3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f93f 	bl	8002fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8f3 	bl	8002f38 <USB_FlushTxFifo>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f911 	bl	8002f84 <USB_FlushRxFifo>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	461a      	mov	r2, r3
 8002d74:	2300      	movs	r3, #0
 8002d76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2300      	movs	r3, #0
 8002d82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
 8002d94:	e043      	b.n	8002e1e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dac:	d118      	bne.n	8002de0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10a      	bne.n	8002dca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e013      	b.n	8002df2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e008      	b.n	8002df2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dec:	461a      	mov	r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e10:	461a      	mov	r2, r3
 8002e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3b7      	bcc.n	8002d96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e043      	b.n	8002eb4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e42:	d118      	bne.n	8002e76 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e013      	b.n	8002e88 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e008      	b.n	8002e88 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e82:	461a      	mov	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2300      	movs	r3, #0
 8002e98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3b7      	bcc.n	8002e2c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ece:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f043 0210 	orr.w	r2, r3, #16
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <USB_DevInit+0x2c4>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f043 0208 	orr.w	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f30:	b004      	add	sp, #16
 8002f32:	4770      	bx	lr
 8002f34:	803c3800 	.word	0x803c3800

08002f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <USB_FlushTxFifo+0x48>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d0f0      	beq.n	8002f52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	00030d40 	.word	0x00030d40

08002f84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2210      	movs	r2, #16
 8002f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a09      	ldr	r2, [pc, #36]	; (8002fc4 <USB_FlushRxFifo+0x40>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e006      	b.n	8002fb6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d0f0      	beq.n	8002f96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	00030d40 	.word	0x00030d40

08002fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003014:	f023 0303 	bic.w	r3, r3, #3
 8003018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3301      	adds	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <USB_CoreReset+0x64>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e01b      	b.n	8003092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	daf2      	bge.n	8003048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <USB_CoreReset+0x64>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e006      	b.n	8003092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d0f0      	beq.n	8003072 <USB_CoreReset+0x36>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	00030d40 	.word	0x00030d40

080030a4 <__errno>:
 80030a4:	4b01      	ldr	r3, [pc, #4]	; (80030ac <__errno+0x8>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4e0d      	ldr	r6, [pc, #52]	; (80030e8 <__libc_init_array+0x38>)
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b6:	1ba4      	subs	r4, r4, r6
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	2500      	movs	r5, #0
 80030bc:	42a5      	cmp	r5, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	4e0b      	ldr	r6, [pc, #44]	; (80030f0 <__libc_init_array+0x40>)
 80030c2:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <__libc_init_array+0x44>)
 80030c4:	f000 ff04 	bl	8003ed0 <_init>
 80030c8:	1ba4      	subs	r4, r4, r6
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	2500      	movs	r5, #0
 80030ce:	42a5      	cmp	r5, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d8:	4798      	blx	r3
 80030da:	3501      	adds	r5, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030e2:	4798      	blx	r3
 80030e4:	3501      	adds	r5, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	0800402c 	.word	0x0800402c
 80030ec:	0800402c 	.word	0x0800402c
 80030f0:	0800402c 	.word	0x0800402c
 80030f4:	08004030 	.word	0x08004030

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <iprintf>:
 8003108:	b40f      	push	{r0, r1, r2, r3}
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <iprintf+0x2c>)
 800310c:	b513      	push	{r0, r1, r4, lr}
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	b124      	cbz	r4, 800311c <iprintf+0x14>
 8003112:	69a3      	ldr	r3, [r4, #24]
 8003114:	b913      	cbnz	r3, 800311c <iprintf+0x14>
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f84e 	bl	80031b8 <__sinit>
 800311c:	ab05      	add	r3, sp, #20
 800311e:	9a04      	ldr	r2, [sp, #16]
 8003120:	68a1      	ldr	r1, [r4, #8]
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	4620      	mov	r0, r4
 8003126:	f000 f955 	bl	80033d4 <_vfiprintf_r>
 800312a:	b002      	add	sp, #8
 800312c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003130:	b004      	add	sp, #16
 8003132:	4770      	bx	lr
 8003134:	2000000c 	.word	0x2000000c

08003138 <std>:
 8003138:	2300      	movs	r3, #0
 800313a:	b510      	push	{r4, lr}
 800313c:	4604      	mov	r4, r0
 800313e:	e9c0 3300 	strd	r3, r3, [r0]
 8003142:	6083      	str	r3, [r0, #8]
 8003144:	8181      	strh	r1, [r0, #12]
 8003146:	6643      	str	r3, [r0, #100]	; 0x64
 8003148:	81c2      	strh	r2, [r0, #14]
 800314a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800314e:	6183      	str	r3, [r0, #24]
 8003150:	4619      	mov	r1, r3
 8003152:	2208      	movs	r2, #8
 8003154:	305c      	adds	r0, #92	; 0x5c
 8003156:	f7ff ffcf 	bl	80030f8 <memset>
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <std+0x38>)
 800315c:	6263      	str	r3, [r4, #36]	; 0x24
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <std+0x3c>)
 8003160:	62a3      	str	r3, [r4, #40]	; 0x28
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <std+0x40>)
 8003164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <std+0x44>)
 8003168:	6224      	str	r4, [r4, #32]
 800316a:	6323      	str	r3, [r4, #48]	; 0x30
 800316c:	bd10      	pop	{r4, pc}
 800316e:	bf00      	nop
 8003170:	08003931 	.word	0x08003931
 8003174:	08003953 	.word	0x08003953
 8003178:	0800398b 	.word	0x0800398b
 800317c:	080039af 	.word	0x080039af

08003180 <_cleanup_r>:
 8003180:	4901      	ldr	r1, [pc, #4]	; (8003188 <_cleanup_r+0x8>)
 8003182:	f000 b885 	b.w	8003290 <_fwalk_reent>
 8003186:	bf00      	nop
 8003188:	08003c89 	.word	0x08003c89

0800318c <__sfmoreglue>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	1e4a      	subs	r2, r1, #1
 8003190:	2568      	movs	r5, #104	; 0x68
 8003192:	4355      	muls	r5, r2
 8003194:	460e      	mov	r6, r1
 8003196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800319a:	f000 f897 	bl	80032cc <_malloc_r>
 800319e:	4604      	mov	r4, r0
 80031a0:	b140      	cbz	r0, 80031b4 <__sfmoreglue+0x28>
 80031a2:	2100      	movs	r1, #0
 80031a4:	e9c0 1600 	strd	r1, r6, [r0]
 80031a8:	300c      	adds	r0, #12
 80031aa:	60a0      	str	r0, [r4, #8]
 80031ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031b0:	f7ff ffa2 	bl	80030f8 <memset>
 80031b4:	4620      	mov	r0, r4
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <__sinit>:
 80031b8:	6983      	ldr	r3, [r0, #24]
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	bb33      	cbnz	r3, 800320e <__sinit+0x56>
 80031c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80031c4:	6503      	str	r3, [r0, #80]	; 0x50
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <__sinit+0x58>)
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <__sinit+0x5c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6282      	str	r2, [r0, #40]	; 0x28
 80031ce:	4298      	cmp	r0, r3
 80031d0:	bf04      	itt	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	6183      	streq	r3, [r0, #24]
 80031d6:	f000 f81f 	bl	8003218 <__sfp>
 80031da:	6060      	str	r0, [r4, #4]
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 f81b 	bl	8003218 <__sfp>
 80031e2:	60a0      	str	r0, [r4, #8]
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 f817 	bl	8003218 <__sfp>
 80031ea:	2200      	movs	r2, #0
 80031ec:	60e0      	str	r0, [r4, #12]
 80031ee:	2104      	movs	r1, #4
 80031f0:	6860      	ldr	r0, [r4, #4]
 80031f2:	f7ff ffa1 	bl	8003138 <std>
 80031f6:	2201      	movs	r2, #1
 80031f8:	2109      	movs	r1, #9
 80031fa:	68a0      	ldr	r0, [r4, #8]
 80031fc:	f7ff ff9c 	bl	8003138 <std>
 8003200:	2202      	movs	r2, #2
 8003202:	2112      	movs	r1, #18
 8003204:	68e0      	ldr	r0, [r4, #12]
 8003206:	f7ff ff97 	bl	8003138 <std>
 800320a:	2301      	movs	r3, #1
 800320c:	61a3      	str	r3, [r4, #24]
 800320e:	bd10      	pop	{r4, pc}
 8003210:	08003f8c 	.word	0x08003f8c
 8003214:	08003181 	.word	0x08003181

08003218 <__sfp>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <__sfp+0x70>)
 800321c:	681e      	ldr	r6, [r3, #0]
 800321e:	69b3      	ldr	r3, [r6, #24]
 8003220:	4607      	mov	r7, r0
 8003222:	b913      	cbnz	r3, 800322a <__sfp+0x12>
 8003224:	4630      	mov	r0, r6
 8003226:	f7ff ffc7 	bl	80031b8 <__sinit>
 800322a:	3648      	adds	r6, #72	; 0x48
 800322c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003230:	3b01      	subs	r3, #1
 8003232:	d503      	bpl.n	800323c <__sfp+0x24>
 8003234:	6833      	ldr	r3, [r6, #0]
 8003236:	b133      	cbz	r3, 8003246 <__sfp+0x2e>
 8003238:	6836      	ldr	r6, [r6, #0]
 800323a:	e7f7      	b.n	800322c <__sfp+0x14>
 800323c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003240:	b16d      	cbz	r5, 800325e <__sfp+0x46>
 8003242:	3468      	adds	r4, #104	; 0x68
 8003244:	e7f4      	b.n	8003230 <__sfp+0x18>
 8003246:	2104      	movs	r1, #4
 8003248:	4638      	mov	r0, r7
 800324a:	f7ff ff9f 	bl	800318c <__sfmoreglue>
 800324e:	6030      	str	r0, [r6, #0]
 8003250:	2800      	cmp	r0, #0
 8003252:	d1f1      	bne.n	8003238 <__sfp+0x20>
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4604      	mov	r4, r0
 800325a:	4620      	mov	r0, r4
 800325c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <__sfp+0x74>)
 8003260:	6665      	str	r5, [r4, #100]	; 0x64
 8003262:	e9c4 5500 	strd	r5, r5, [r4]
 8003266:	60a5      	str	r5, [r4, #8]
 8003268:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800326c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003270:	2208      	movs	r2, #8
 8003272:	4629      	mov	r1, r5
 8003274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003278:	f7ff ff3e 	bl	80030f8 <memset>
 800327c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003284:	e7e9      	b.n	800325a <__sfp+0x42>
 8003286:	bf00      	nop
 8003288:	08003f8c 	.word	0x08003f8c
 800328c:	ffff0001 	.word	0xffff0001

08003290 <_fwalk_reent>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	4680      	mov	r8, r0
 8003296:	4689      	mov	r9, r1
 8003298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800329c:	2600      	movs	r6, #0
 800329e:	b914      	cbnz	r4, 80032a6 <_fwalk_reent+0x16>
 80032a0:	4630      	mov	r0, r6
 80032a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80032aa:	3f01      	subs	r7, #1
 80032ac:	d501      	bpl.n	80032b2 <_fwalk_reent+0x22>
 80032ae:	6824      	ldr	r4, [r4, #0]
 80032b0:	e7f5      	b.n	800329e <_fwalk_reent+0xe>
 80032b2:	89ab      	ldrh	r3, [r5, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d907      	bls.n	80032c8 <_fwalk_reent+0x38>
 80032b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032bc:	3301      	adds	r3, #1
 80032be:	d003      	beq.n	80032c8 <_fwalk_reent+0x38>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4640      	mov	r0, r8
 80032c4:	47c8      	blx	r9
 80032c6:	4306      	orrs	r6, r0
 80032c8:	3568      	adds	r5, #104	; 0x68
 80032ca:	e7ee      	b.n	80032aa <_fwalk_reent+0x1a>

080032cc <_malloc_r>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	1ccd      	adds	r5, r1, #3
 80032d0:	f025 0503 	bic.w	r5, r5, #3
 80032d4:	3508      	adds	r5, #8
 80032d6:	2d0c      	cmp	r5, #12
 80032d8:	bf38      	it	cc
 80032da:	250c      	movcc	r5, #12
 80032dc:	2d00      	cmp	r5, #0
 80032de:	4606      	mov	r6, r0
 80032e0:	db01      	blt.n	80032e6 <_malloc_r+0x1a>
 80032e2:	42a9      	cmp	r1, r5
 80032e4:	d903      	bls.n	80032ee <_malloc_r+0x22>
 80032e6:	230c      	movs	r3, #12
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	2000      	movs	r0, #0
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
 80032ee:	f000 fd6b 	bl	8003dc8 <__malloc_lock>
 80032f2:	4a21      	ldr	r2, [pc, #132]	; (8003378 <_malloc_r+0xac>)
 80032f4:	6814      	ldr	r4, [r2, #0]
 80032f6:	4621      	mov	r1, r4
 80032f8:	b991      	cbnz	r1, 8003320 <_malloc_r+0x54>
 80032fa:	4c20      	ldr	r4, [pc, #128]	; (800337c <_malloc_r+0xb0>)
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b91b      	cbnz	r3, 8003308 <_malloc_r+0x3c>
 8003300:	4630      	mov	r0, r6
 8003302:	f000 fb05 	bl	8003910 <_sbrk_r>
 8003306:	6020      	str	r0, [r4, #0]
 8003308:	4629      	mov	r1, r5
 800330a:	4630      	mov	r0, r6
 800330c:	f000 fb00 	bl	8003910 <_sbrk_r>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d124      	bne.n	800335e <_malloc_r+0x92>
 8003314:	230c      	movs	r3, #12
 8003316:	6033      	str	r3, [r6, #0]
 8003318:	4630      	mov	r0, r6
 800331a:	f000 fd56 	bl	8003dca <__malloc_unlock>
 800331e:	e7e4      	b.n	80032ea <_malloc_r+0x1e>
 8003320:	680b      	ldr	r3, [r1, #0]
 8003322:	1b5b      	subs	r3, r3, r5
 8003324:	d418      	bmi.n	8003358 <_malloc_r+0x8c>
 8003326:	2b0b      	cmp	r3, #11
 8003328:	d90f      	bls.n	800334a <_malloc_r+0x7e>
 800332a:	600b      	str	r3, [r1, #0]
 800332c:	50cd      	str	r5, [r1, r3]
 800332e:	18cc      	adds	r4, r1, r3
 8003330:	4630      	mov	r0, r6
 8003332:	f000 fd4a 	bl	8003dca <__malloc_unlock>
 8003336:	f104 000b 	add.w	r0, r4, #11
 800333a:	1d23      	adds	r3, r4, #4
 800333c:	f020 0007 	bic.w	r0, r0, #7
 8003340:	1ac3      	subs	r3, r0, r3
 8003342:	d0d3      	beq.n	80032ec <_malloc_r+0x20>
 8003344:	425a      	negs	r2, r3
 8003346:	50e2      	str	r2, [r4, r3]
 8003348:	e7d0      	b.n	80032ec <_malloc_r+0x20>
 800334a:	428c      	cmp	r4, r1
 800334c:	684b      	ldr	r3, [r1, #4]
 800334e:	bf16      	itet	ne
 8003350:	6063      	strne	r3, [r4, #4]
 8003352:	6013      	streq	r3, [r2, #0]
 8003354:	460c      	movne	r4, r1
 8003356:	e7eb      	b.n	8003330 <_malloc_r+0x64>
 8003358:	460c      	mov	r4, r1
 800335a:	6849      	ldr	r1, [r1, #4]
 800335c:	e7cc      	b.n	80032f8 <_malloc_r+0x2c>
 800335e:	1cc4      	adds	r4, r0, #3
 8003360:	f024 0403 	bic.w	r4, r4, #3
 8003364:	42a0      	cmp	r0, r4
 8003366:	d005      	beq.n	8003374 <_malloc_r+0xa8>
 8003368:	1a21      	subs	r1, r4, r0
 800336a:	4630      	mov	r0, r6
 800336c:	f000 fad0 	bl	8003910 <_sbrk_r>
 8003370:	3001      	adds	r0, #1
 8003372:	d0cf      	beq.n	8003314 <_malloc_r+0x48>
 8003374:	6025      	str	r5, [r4, #0]
 8003376:	e7db      	b.n	8003330 <_malloc_r+0x64>
 8003378:	20000090 	.word	0x20000090
 800337c:	20000094 	.word	0x20000094

08003380 <__sfputc_r>:
 8003380:	6893      	ldr	r3, [r2, #8]
 8003382:	3b01      	subs	r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	b410      	push	{r4}
 8003388:	6093      	str	r3, [r2, #8]
 800338a:	da08      	bge.n	800339e <__sfputc_r+0x1e>
 800338c:	6994      	ldr	r4, [r2, #24]
 800338e:	42a3      	cmp	r3, r4
 8003390:	db01      	blt.n	8003396 <__sfputc_r+0x16>
 8003392:	290a      	cmp	r1, #10
 8003394:	d103      	bne.n	800339e <__sfputc_r+0x1e>
 8003396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800339a:	f000 bb0d 	b.w	80039b8 <__swbuf_r>
 800339e:	6813      	ldr	r3, [r2, #0]
 80033a0:	1c58      	adds	r0, r3, #1
 80033a2:	6010      	str	r0, [r2, #0]
 80033a4:	7019      	strb	r1, [r3, #0]
 80033a6:	4608      	mov	r0, r1
 80033a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <__sfputs_r>:
 80033ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b0:	4606      	mov	r6, r0
 80033b2:	460f      	mov	r7, r1
 80033b4:	4614      	mov	r4, r2
 80033b6:	18d5      	adds	r5, r2, r3
 80033b8:	42ac      	cmp	r4, r5
 80033ba:	d101      	bne.n	80033c0 <__sfputs_r+0x12>
 80033bc:	2000      	movs	r0, #0
 80033be:	e007      	b.n	80033d0 <__sfputs_r+0x22>
 80033c0:	463a      	mov	r2, r7
 80033c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c6:	4630      	mov	r0, r6
 80033c8:	f7ff ffda 	bl	8003380 <__sfputc_r>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d1f3      	bne.n	80033b8 <__sfputs_r+0xa>
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033d4 <_vfiprintf_r>:
 80033d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d8:	460c      	mov	r4, r1
 80033da:	b09d      	sub	sp, #116	; 0x74
 80033dc:	4617      	mov	r7, r2
 80033de:	461d      	mov	r5, r3
 80033e0:	4606      	mov	r6, r0
 80033e2:	b118      	cbz	r0, 80033ec <_vfiprintf_r+0x18>
 80033e4:	6983      	ldr	r3, [r0, #24]
 80033e6:	b90b      	cbnz	r3, 80033ec <_vfiprintf_r+0x18>
 80033e8:	f7ff fee6 	bl	80031b8 <__sinit>
 80033ec:	4b7c      	ldr	r3, [pc, #496]	; (80035e0 <_vfiprintf_r+0x20c>)
 80033ee:	429c      	cmp	r4, r3
 80033f0:	d158      	bne.n	80034a4 <_vfiprintf_r+0xd0>
 80033f2:	6874      	ldr	r4, [r6, #4]
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	0718      	lsls	r0, r3, #28
 80033f8:	d55e      	bpl.n	80034b8 <_vfiprintf_r+0xe4>
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d05b      	beq.n	80034b8 <_vfiprintf_r+0xe4>
 8003400:	2300      	movs	r3, #0
 8003402:	9309      	str	r3, [sp, #36]	; 0x24
 8003404:	2320      	movs	r3, #32
 8003406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800340a:	2330      	movs	r3, #48	; 0x30
 800340c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003410:	9503      	str	r5, [sp, #12]
 8003412:	f04f 0b01 	mov.w	fp, #1
 8003416:	46b8      	mov	r8, r7
 8003418:	4645      	mov	r5, r8
 800341a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800341e:	b10b      	cbz	r3, 8003424 <_vfiprintf_r+0x50>
 8003420:	2b25      	cmp	r3, #37	; 0x25
 8003422:	d154      	bne.n	80034ce <_vfiprintf_r+0xfa>
 8003424:	ebb8 0a07 	subs.w	sl, r8, r7
 8003428:	d00b      	beq.n	8003442 <_vfiprintf_r+0x6e>
 800342a:	4653      	mov	r3, sl
 800342c:	463a      	mov	r2, r7
 800342e:	4621      	mov	r1, r4
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff ffbc 	bl	80033ae <__sfputs_r>
 8003436:	3001      	adds	r0, #1
 8003438:	f000 80c2 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 800343c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343e:	4453      	add	r3, sl
 8003440:	9309      	str	r3, [sp, #36]	; 0x24
 8003442:	f898 3000 	ldrb.w	r3, [r8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ba 	beq.w	80035c0 <_vfiprintf_r+0x1ec>
 800344c:	2300      	movs	r3, #0
 800344e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	9307      	str	r3, [sp, #28]
 800345a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345e:	931a      	str	r3, [sp, #104]	; 0x68
 8003460:	46a8      	mov	r8, r5
 8003462:	2205      	movs	r2, #5
 8003464:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003468:	485e      	ldr	r0, [pc, #376]	; (80035e4 <_vfiprintf_r+0x210>)
 800346a:	f7fc fec1 	bl	80001f0 <memchr>
 800346e:	9b04      	ldr	r3, [sp, #16]
 8003470:	bb78      	cbnz	r0, 80034d2 <_vfiprintf_r+0xfe>
 8003472:	06d9      	lsls	r1, r3, #27
 8003474:	bf44      	itt	mi
 8003476:	2220      	movmi	r2, #32
 8003478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800347c:	071a      	lsls	r2, r3, #28
 800347e:	bf44      	itt	mi
 8003480:	222b      	movmi	r2, #43	; 0x2b
 8003482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003486:	782a      	ldrb	r2, [r5, #0]
 8003488:	2a2a      	cmp	r2, #42	; 0x2a
 800348a:	d02a      	beq.n	80034e2 <_vfiprintf_r+0x10e>
 800348c:	9a07      	ldr	r2, [sp, #28]
 800348e:	46a8      	mov	r8, r5
 8003490:	2000      	movs	r0, #0
 8003492:	250a      	movs	r5, #10
 8003494:	4641      	mov	r1, r8
 8003496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800349a:	3b30      	subs	r3, #48	; 0x30
 800349c:	2b09      	cmp	r3, #9
 800349e:	d969      	bls.n	8003574 <_vfiprintf_r+0x1a0>
 80034a0:	b360      	cbz	r0, 80034fc <_vfiprintf_r+0x128>
 80034a2:	e024      	b.n	80034ee <_vfiprintf_r+0x11a>
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <_vfiprintf_r+0x214>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	d101      	bne.n	80034ae <_vfiprintf_r+0xda>
 80034aa:	68b4      	ldr	r4, [r6, #8]
 80034ac:	e7a2      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <_vfiprintf_r+0x218>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	bf08      	it	eq
 80034b4:	68f4      	ldreq	r4, [r6, #12]
 80034b6:	e79d      	b.n	80033f4 <_vfiprintf_r+0x20>
 80034b8:	4621      	mov	r1, r4
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 fae0 	bl	8003a80 <__swsetup_r>
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d09d      	beq.n	8003400 <_vfiprintf_r+0x2c>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c8:	b01d      	add	sp, #116	; 0x74
 80034ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ce:	46a8      	mov	r8, r5
 80034d0:	e7a2      	b.n	8003418 <_vfiprintf_r+0x44>
 80034d2:	4a44      	ldr	r2, [pc, #272]	; (80035e4 <_vfiprintf_r+0x210>)
 80034d4:	1a80      	subs	r0, r0, r2
 80034d6:	fa0b f000 	lsl.w	r0, fp, r0
 80034da:	4318      	orrs	r0, r3
 80034dc:	9004      	str	r0, [sp, #16]
 80034de:	4645      	mov	r5, r8
 80034e0:	e7be      	b.n	8003460 <_vfiprintf_r+0x8c>
 80034e2:	9a03      	ldr	r2, [sp, #12]
 80034e4:	1d11      	adds	r1, r2, #4
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	9103      	str	r1, [sp, #12]
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	db01      	blt.n	80034f2 <_vfiprintf_r+0x11e>
 80034ee:	9207      	str	r2, [sp, #28]
 80034f0:	e004      	b.n	80034fc <_vfiprintf_r+0x128>
 80034f2:	4252      	negs	r2, r2
 80034f4:	f043 0302 	orr.w	r3, r3, #2
 80034f8:	9207      	str	r2, [sp, #28]
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	f898 3000 	ldrb.w	r3, [r8]
 8003500:	2b2e      	cmp	r3, #46	; 0x2e
 8003502:	d10e      	bne.n	8003522 <_vfiprintf_r+0x14e>
 8003504:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003508:	2b2a      	cmp	r3, #42	; 0x2a
 800350a:	d138      	bne.n	800357e <_vfiprintf_r+0x1aa>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	1d1a      	adds	r2, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	9203      	str	r2, [sp, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	bfb8      	it	lt
 8003518:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800351c:	f108 0802 	add.w	r8, r8, #2
 8003520:	9305      	str	r3, [sp, #20]
 8003522:	4d33      	ldr	r5, [pc, #204]	; (80035f0 <_vfiprintf_r+0x21c>)
 8003524:	f898 1000 	ldrb.w	r1, [r8]
 8003528:	2203      	movs	r2, #3
 800352a:	4628      	mov	r0, r5
 800352c:	f7fc fe60 	bl	80001f0 <memchr>
 8003530:	b140      	cbz	r0, 8003544 <_vfiprintf_r+0x170>
 8003532:	2340      	movs	r3, #64	; 0x40
 8003534:	1b40      	subs	r0, r0, r5
 8003536:	fa03 f000 	lsl.w	r0, r3, r0
 800353a:	9b04      	ldr	r3, [sp, #16]
 800353c:	4303      	orrs	r3, r0
 800353e:	f108 0801 	add.w	r8, r8, #1
 8003542:	9304      	str	r3, [sp, #16]
 8003544:	f898 1000 	ldrb.w	r1, [r8]
 8003548:	482a      	ldr	r0, [pc, #168]	; (80035f4 <_vfiprintf_r+0x220>)
 800354a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800354e:	2206      	movs	r2, #6
 8003550:	f108 0701 	add.w	r7, r8, #1
 8003554:	f7fc fe4c 	bl	80001f0 <memchr>
 8003558:	2800      	cmp	r0, #0
 800355a:	d037      	beq.n	80035cc <_vfiprintf_r+0x1f8>
 800355c:	4b26      	ldr	r3, [pc, #152]	; (80035f8 <_vfiprintf_r+0x224>)
 800355e:	bb1b      	cbnz	r3, 80035a8 <_vfiprintf_r+0x1d4>
 8003560:	9b03      	ldr	r3, [sp, #12]
 8003562:	3307      	adds	r3, #7
 8003564:	f023 0307 	bic.w	r3, r3, #7
 8003568:	3308      	adds	r3, #8
 800356a:	9303      	str	r3, [sp, #12]
 800356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800356e:	444b      	add	r3, r9
 8003570:	9309      	str	r3, [sp, #36]	; 0x24
 8003572:	e750      	b.n	8003416 <_vfiprintf_r+0x42>
 8003574:	fb05 3202 	mla	r2, r5, r2, r3
 8003578:	2001      	movs	r0, #1
 800357a:	4688      	mov	r8, r1
 800357c:	e78a      	b.n	8003494 <_vfiprintf_r+0xc0>
 800357e:	2300      	movs	r3, #0
 8003580:	f108 0801 	add.w	r8, r8, #1
 8003584:	9305      	str	r3, [sp, #20]
 8003586:	4619      	mov	r1, r3
 8003588:	250a      	movs	r5, #10
 800358a:	4640      	mov	r0, r8
 800358c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003590:	3a30      	subs	r2, #48	; 0x30
 8003592:	2a09      	cmp	r2, #9
 8003594:	d903      	bls.n	800359e <_vfiprintf_r+0x1ca>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0c3      	beq.n	8003522 <_vfiprintf_r+0x14e>
 800359a:	9105      	str	r1, [sp, #20]
 800359c:	e7c1      	b.n	8003522 <_vfiprintf_r+0x14e>
 800359e:	fb05 2101 	mla	r1, r5, r1, r2
 80035a2:	2301      	movs	r3, #1
 80035a4:	4680      	mov	r8, r0
 80035a6:	e7f0      	b.n	800358a <_vfiprintf_r+0x1b6>
 80035a8:	ab03      	add	r3, sp, #12
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4622      	mov	r2, r4
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <_vfiprintf_r+0x228>)
 80035b0:	a904      	add	r1, sp, #16
 80035b2:	4630      	mov	r0, r6
 80035b4:	f3af 8000 	nop.w
 80035b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80035bc:	4681      	mov	r9, r0
 80035be:	d1d5      	bne.n	800356c <_vfiprintf_r+0x198>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	065b      	lsls	r3, r3, #25
 80035c4:	f53f af7e 	bmi.w	80034c4 <_vfiprintf_r+0xf0>
 80035c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ca:	e77d      	b.n	80034c8 <_vfiprintf_r+0xf4>
 80035cc:	ab03      	add	r3, sp, #12
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4622      	mov	r2, r4
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <_vfiprintf_r+0x228>)
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	4630      	mov	r0, r6
 80035d8:	f000 f888 	bl	80036ec <_printf_i>
 80035dc:	e7ec      	b.n	80035b8 <_vfiprintf_r+0x1e4>
 80035de:	bf00      	nop
 80035e0:	08003fb0 	.word	0x08003fb0
 80035e4:	08003ff0 	.word	0x08003ff0
 80035e8:	08003fd0 	.word	0x08003fd0
 80035ec:	08003f90 	.word	0x08003f90
 80035f0:	08003ff6 	.word	0x08003ff6
 80035f4:	08003ffa 	.word	0x08003ffa
 80035f8:	00000000 	.word	0x00000000
 80035fc:	080033af 	.word	0x080033af

08003600 <_printf_common>:
 8003600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003604:	4691      	mov	r9, r2
 8003606:	461f      	mov	r7, r3
 8003608:	688a      	ldr	r2, [r1, #8]
 800360a:	690b      	ldr	r3, [r1, #16]
 800360c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003610:	4293      	cmp	r3, r2
 8003612:	bfb8      	it	lt
 8003614:	4613      	movlt	r3, r2
 8003616:	f8c9 3000 	str.w	r3, [r9]
 800361a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800361e:	4606      	mov	r6, r0
 8003620:	460c      	mov	r4, r1
 8003622:	b112      	cbz	r2, 800362a <_printf_common+0x2a>
 8003624:	3301      	adds	r3, #1
 8003626:	f8c9 3000 	str.w	r3, [r9]
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	0699      	lsls	r1, r3, #26
 800362e:	bf42      	ittt	mi
 8003630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003634:	3302      	addmi	r3, #2
 8003636:	f8c9 3000 	strmi.w	r3, [r9]
 800363a:	6825      	ldr	r5, [r4, #0]
 800363c:	f015 0506 	ands.w	r5, r5, #6
 8003640:	d107      	bne.n	8003652 <_printf_common+0x52>
 8003642:	f104 0a19 	add.w	sl, r4, #25
 8003646:	68e3      	ldr	r3, [r4, #12]
 8003648:	f8d9 2000 	ldr.w	r2, [r9]
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	42ab      	cmp	r3, r5
 8003650:	dc28      	bgt.n	80036a4 <_printf_common+0xa4>
 8003652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	3300      	adds	r3, #0
 800365a:	bf18      	it	ne
 800365c:	2301      	movne	r3, #1
 800365e:	0692      	lsls	r2, r2, #26
 8003660:	d42d      	bmi.n	80036be <_printf_common+0xbe>
 8003662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003666:	4639      	mov	r1, r7
 8003668:	4630      	mov	r0, r6
 800366a:	47c0      	blx	r8
 800366c:	3001      	adds	r0, #1
 800366e:	d020      	beq.n	80036b2 <_printf_common+0xb2>
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	68e5      	ldr	r5, [r4, #12]
 8003674:	f8d9 2000 	ldr.w	r2, [r9]
 8003678:	f003 0306 	and.w	r3, r3, #6
 800367c:	2b04      	cmp	r3, #4
 800367e:	bf08      	it	eq
 8003680:	1aad      	subeq	r5, r5, r2
 8003682:	68a3      	ldr	r3, [r4, #8]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	bf0c      	ite	eq
 8003688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800368c:	2500      	movne	r5, #0
 800368e:	4293      	cmp	r3, r2
 8003690:	bfc4      	itt	gt
 8003692:	1a9b      	subgt	r3, r3, r2
 8003694:	18ed      	addgt	r5, r5, r3
 8003696:	f04f 0900 	mov.w	r9, #0
 800369a:	341a      	adds	r4, #26
 800369c:	454d      	cmp	r5, r9
 800369e:	d11a      	bne.n	80036d6 <_printf_common+0xd6>
 80036a0:	2000      	movs	r0, #0
 80036a2:	e008      	b.n	80036b6 <_printf_common+0xb6>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4652      	mov	r2, sl
 80036a8:	4639      	mov	r1, r7
 80036aa:	4630      	mov	r0, r6
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d103      	bne.n	80036ba <_printf_common+0xba>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ba:	3501      	adds	r5, #1
 80036bc:	e7c3      	b.n	8003646 <_printf_common+0x46>
 80036be:	18e1      	adds	r1, r4, r3
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	2030      	movs	r0, #48	; 0x30
 80036c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036c8:	4422      	add	r2, r4
 80036ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036d2:	3302      	adds	r3, #2
 80036d4:	e7c5      	b.n	8003662 <_printf_common+0x62>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4622      	mov	r2, r4
 80036da:	4639      	mov	r1, r7
 80036dc:	4630      	mov	r0, r6
 80036de:	47c0      	blx	r8
 80036e0:	3001      	adds	r0, #1
 80036e2:	d0e6      	beq.n	80036b2 <_printf_common+0xb2>
 80036e4:	f109 0901 	add.w	r9, r9, #1
 80036e8:	e7d8      	b.n	800369c <_printf_common+0x9c>
	...

080036ec <_printf_i>:
 80036ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036f4:	460c      	mov	r4, r1
 80036f6:	7e09      	ldrb	r1, [r1, #24]
 80036f8:	b085      	sub	sp, #20
 80036fa:	296e      	cmp	r1, #110	; 0x6e
 80036fc:	4617      	mov	r7, r2
 80036fe:	4606      	mov	r6, r0
 8003700:	4698      	mov	r8, r3
 8003702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003704:	f000 80b3 	beq.w	800386e <_printf_i+0x182>
 8003708:	d822      	bhi.n	8003750 <_printf_i+0x64>
 800370a:	2963      	cmp	r1, #99	; 0x63
 800370c:	d036      	beq.n	800377c <_printf_i+0x90>
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x3a>
 8003710:	2900      	cmp	r1, #0
 8003712:	f000 80b9 	beq.w	8003888 <_printf_i+0x19c>
 8003716:	2958      	cmp	r1, #88	; 0x58
 8003718:	f000 8083 	beq.w	8003822 <_printf_i+0x136>
 800371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003724:	e032      	b.n	800378c <_printf_i+0xa0>
 8003726:	2964      	cmp	r1, #100	; 0x64
 8003728:	d001      	beq.n	800372e <_printf_i+0x42>
 800372a:	2969      	cmp	r1, #105	; 0x69
 800372c:	d1f6      	bne.n	800371c <_printf_i+0x30>
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	6813      	ldr	r3, [r2, #0]
 8003732:	0605      	lsls	r5, r0, #24
 8003734:	f103 0104 	add.w	r1, r3, #4
 8003738:	d52a      	bpl.n	8003790 <_printf_i+0xa4>
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6011      	str	r1, [r2, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da03      	bge.n	800374a <_printf_i+0x5e>
 8003742:	222d      	movs	r2, #45	; 0x2d
 8003744:	425b      	negs	r3, r3
 8003746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800374a:	486f      	ldr	r0, [pc, #444]	; (8003908 <_printf_i+0x21c>)
 800374c:	220a      	movs	r2, #10
 800374e:	e039      	b.n	80037c4 <_printf_i+0xd8>
 8003750:	2973      	cmp	r1, #115	; 0x73
 8003752:	f000 809d 	beq.w	8003890 <_printf_i+0x1a4>
 8003756:	d808      	bhi.n	800376a <_printf_i+0x7e>
 8003758:	296f      	cmp	r1, #111	; 0x6f
 800375a:	d020      	beq.n	800379e <_printf_i+0xb2>
 800375c:	2970      	cmp	r1, #112	; 0x70
 800375e:	d1dd      	bne.n	800371c <_printf_i+0x30>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f043 0320 	orr.w	r3, r3, #32
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e003      	b.n	8003772 <_printf_i+0x86>
 800376a:	2975      	cmp	r1, #117	; 0x75
 800376c:	d017      	beq.n	800379e <_printf_i+0xb2>
 800376e:	2978      	cmp	r1, #120	; 0x78
 8003770:	d1d4      	bne.n	800371c <_printf_i+0x30>
 8003772:	2378      	movs	r3, #120	; 0x78
 8003774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003778:	4864      	ldr	r0, [pc, #400]	; (800390c <_printf_i+0x220>)
 800377a:	e055      	b.n	8003828 <_printf_i+0x13c>
 800377c:	6813      	ldr	r3, [r2, #0]
 800377e:	1d19      	adds	r1, r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800378c:	2301      	movs	r3, #1
 800378e:	e08c      	b.n	80038aa <_printf_i+0x1be>
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6011      	str	r1, [r2, #0]
 8003794:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003798:	bf18      	it	ne
 800379a:	b21b      	sxthne	r3, r3
 800379c:	e7cf      	b.n	800373e <_printf_i+0x52>
 800379e:	6813      	ldr	r3, [r2, #0]
 80037a0:	6825      	ldr	r5, [r4, #0]
 80037a2:	1d18      	adds	r0, r3, #4
 80037a4:	6010      	str	r0, [r2, #0]
 80037a6:	0628      	lsls	r0, r5, #24
 80037a8:	d501      	bpl.n	80037ae <_printf_i+0xc2>
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	e002      	b.n	80037b4 <_printf_i+0xc8>
 80037ae:	0668      	lsls	r0, r5, #25
 80037b0:	d5fb      	bpl.n	80037aa <_printf_i+0xbe>
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	4854      	ldr	r0, [pc, #336]	; (8003908 <_printf_i+0x21c>)
 80037b6:	296f      	cmp	r1, #111	; 0x6f
 80037b8:	bf14      	ite	ne
 80037ba:	220a      	movne	r2, #10
 80037bc:	2208      	moveq	r2, #8
 80037be:	2100      	movs	r1, #0
 80037c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037c4:	6865      	ldr	r5, [r4, #4]
 80037c6:	60a5      	str	r5, [r4, #8]
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	f2c0 8095 	blt.w	80038f8 <_printf_i+0x20c>
 80037ce:	6821      	ldr	r1, [r4, #0]
 80037d0:	f021 0104 	bic.w	r1, r1, #4
 80037d4:	6021      	str	r1, [r4, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d13d      	bne.n	8003856 <_printf_i+0x16a>
 80037da:	2d00      	cmp	r5, #0
 80037dc:	f040 808e 	bne.w	80038fc <_printf_i+0x210>
 80037e0:	4665      	mov	r5, ip
 80037e2:	2a08      	cmp	r2, #8
 80037e4:	d10b      	bne.n	80037fe <_printf_i+0x112>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	07db      	lsls	r3, r3, #31
 80037ea:	d508      	bpl.n	80037fe <_printf_i+0x112>
 80037ec:	6923      	ldr	r3, [r4, #16]
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	bfde      	ittt	le
 80037f4:	2330      	movle	r3, #48	; 0x30
 80037f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037fe:	ebac 0305 	sub.w	r3, ip, r5
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	f8cd 8000 	str.w	r8, [sp]
 8003808:	463b      	mov	r3, r7
 800380a:	aa03      	add	r2, sp, #12
 800380c:	4621      	mov	r1, r4
 800380e:	4630      	mov	r0, r6
 8003810:	f7ff fef6 	bl	8003600 <_printf_common>
 8003814:	3001      	adds	r0, #1
 8003816:	d14d      	bne.n	80038b4 <_printf_i+0x1c8>
 8003818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800381c:	b005      	add	sp, #20
 800381e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003822:	4839      	ldr	r0, [pc, #228]	; (8003908 <_printf_i+0x21c>)
 8003824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003828:	6813      	ldr	r3, [r2, #0]
 800382a:	6821      	ldr	r1, [r4, #0]
 800382c:	1d1d      	adds	r5, r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6015      	str	r5, [r2, #0]
 8003832:	060a      	lsls	r2, r1, #24
 8003834:	d50b      	bpl.n	800384e <_printf_i+0x162>
 8003836:	07ca      	lsls	r2, r1, #31
 8003838:	bf44      	itt	mi
 800383a:	f041 0120 	orrmi.w	r1, r1, #32
 800383e:	6021      	strmi	r1, [r4, #0]
 8003840:	b91b      	cbnz	r3, 800384a <_printf_i+0x15e>
 8003842:	6822      	ldr	r2, [r4, #0]
 8003844:	f022 0220 	bic.w	r2, r2, #32
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	2210      	movs	r2, #16
 800384c:	e7b7      	b.n	80037be <_printf_i+0xd2>
 800384e:	064d      	lsls	r5, r1, #25
 8003850:	bf48      	it	mi
 8003852:	b29b      	uxthmi	r3, r3
 8003854:	e7ef      	b.n	8003836 <_printf_i+0x14a>
 8003856:	4665      	mov	r5, ip
 8003858:	fbb3 f1f2 	udiv	r1, r3, r2
 800385c:	fb02 3311 	mls	r3, r2, r1, r3
 8003860:	5cc3      	ldrb	r3, [r0, r3]
 8003862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003866:	460b      	mov	r3, r1
 8003868:	2900      	cmp	r1, #0
 800386a:	d1f5      	bne.n	8003858 <_printf_i+0x16c>
 800386c:	e7b9      	b.n	80037e2 <_printf_i+0xf6>
 800386e:	6813      	ldr	r3, [r2, #0]
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	6961      	ldr	r1, [r4, #20]
 8003874:	1d18      	adds	r0, r3, #4
 8003876:	6010      	str	r0, [r2, #0]
 8003878:	0628      	lsls	r0, r5, #24
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	d501      	bpl.n	8003882 <_printf_i+0x196>
 800387e:	6019      	str	r1, [r3, #0]
 8003880:	e002      	b.n	8003888 <_printf_i+0x19c>
 8003882:	066a      	lsls	r2, r5, #25
 8003884:	d5fb      	bpl.n	800387e <_printf_i+0x192>
 8003886:	8019      	strh	r1, [r3, #0]
 8003888:	2300      	movs	r3, #0
 800388a:	6123      	str	r3, [r4, #16]
 800388c:	4665      	mov	r5, ip
 800388e:	e7b9      	b.n	8003804 <_printf_i+0x118>
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	1d19      	adds	r1, r3, #4
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	681d      	ldr	r5, [r3, #0]
 8003898:	6862      	ldr	r2, [r4, #4]
 800389a:	2100      	movs	r1, #0
 800389c:	4628      	mov	r0, r5
 800389e:	f7fc fca7 	bl	80001f0 <memchr>
 80038a2:	b108      	cbz	r0, 80038a8 <_printf_i+0x1bc>
 80038a4:	1b40      	subs	r0, r0, r5
 80038a6:	6060      	str	r0, [r4, #4]
 80038a8:	6863      	ldr	r3, [r4, #4]
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	2300      	movs	r3, #0
 80038ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b2:	e7a7      	b.n	8003804 <_printf_i+0x118>
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	462a      	mov	r2, r5
 80038b8:	4639      	mov	r1, r7
 80038ba:	4630      	mov	r0, r6
 80038bc:	47c0      	blx	r8
 80038be:	3001      	adds	r0, #1
 80038c0:	d0aa      	beq.n	8003818 <_printf_i+0x12c>
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	079b      	lsls	r3, r3, #30
 80038c6:	d413      	bmi.n	80038f0 <_printf_i+0x204>
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	9b03      	ldr	r3, [sp, #12]
 80038cc:	4298      	cmp	r0, r3
 80038ce:	bfb8      	it	lt
 80038d0:	4618      	movlt	r0, r3
 80038d2:	e7a3      	b.n	800381c <_printf_i+0x130>
 80038d4:	2301      	movs	r3, #1
 80038d6:	464a      	mov	r2, r9
 80038d8:	4639      	mov	r1, r7
 80038da:	4630      	mov	r0, r6
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d09a      	beq.n	8003818 <_printf_i+0x12c>
 80038e2:	3501      	adds	r5, #1
 80038e4:	68e3      	ldr	r3, [r4, #12]
 80038e6:	9a03      	ldr	r2, [sp, #12]
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	42ab      	cmp	r3, r5
 80038ec:	dcf2      	bgt.n	80038d4 <_printf_i+0x1e8>
 80038ee:	e7eb      	b.n	80038c8 <_printf_i+0x1dc>
 80038f0:	2500      	movs	r5, #0
 80038f2:	f104 0919 	add.w	r9, r4, #25
 80038f6:	e7f5      	b.n	80038e4 <_printf_i+0x1f8>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ac      	bne.n	8003856 <_printf_i+0x16a>
 80038fc:	7803      	ldrb	r3, [r0, #0]
 80038fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003902:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003906:	e76c      	b.n	80037e2 <_printf_i+0xf6>
 8003908:	08004001 	.word	0x08004001
 800390c:	08004012 	.word	0x08004012

08003910 <_sbrk_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4c06      	ldr	r4, [pc, #24]	; (800392c <_sbrk_r+0x1c>)
 8003914:	2300      	movs	r3, #0
 8003916:	4605      	mov	r5, r0
 8003918:	4608      	mov	r0, r1
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	f7fd fa88 	bl	8000e30 <_sbrk>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_sbrk_r+0x1a>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	b103      	cbz	r3, 800392a <_sbrk_r+0x1a>
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	200004e4 	.word	0x200004e4

08003930 <__sread>:
 8003930:	b510      	push	{r4, lr}
 8003932:	460c      	mov	r4, r1
 8003934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003938:	f000 fa96 	bl	8003e68 <_read_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	bfab      	itete	ge
 8003940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003942:	89a3      	ldrhlt	r3, [r4, #12]
 8003944:	181b      	addge	r3, r3, r0
 8003946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800394a:	bfac      	ite	ge
 800394c:	6563      	strge	r3, [r4, #84]	; 0x54
 800394e:	81a3      	strhlt	r3, [r4, #12]
 8003950:	bd10      	pop	{r4, pc}

08003952 <__swrite>:
 8003952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	461f      	mov	r7, r3
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	05db      	lsls	r3, r3, #23
 800395c:	4605      	mov	r5, r0
 800395e:	460c      	mov	r4, r1
 8003960:	4616      	mov	r6, r2
 8003962:	d505      	bpl.n	8003970 <__swrite+0x1e>
 8003964:	2302      	movs	r3, #2
 8003966:	2200      	movs	r2, #0
 8003968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396c:	f000 f9b6 	bl	8003cdc <_lseek_r>
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800397a:	81a3      	strh	r3, [r4, #12]
 800397c:	4632      	mov	r2, r6
 800397e:	463b      	mov	r3, r7
 8003980:	4628      	mov	r0, r5
 8003982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003986:	f000 b869 	b.w	8003a5c <_write_r>

0800398a <__sseek>:
 800398a:	b510      	push	{r4, lr}
 800398c:	460c      	mov	r4, r1
 800398e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003992:	f000 f9a3 	bl	8003cdc <_lseek_r>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	bf15      	itete	ne
 800399c:	6560      	strne	r0, [r4, #84]	; 0x54
 800399e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039a6:	81a3      	strheq	r3, [r4, #12]
 80039a8:	bf18      	it	ne
 80039aa:	81a3      	strhne	r3, [r4, #12]
 80039ac:	bd10      	pop	{r4, pc}

080039ae <__sclose>:
 80039ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b2:	f000 b8d3 	b.w	8003b5c <_close_r>
	...

080039b8 <__swbuf_r>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	460e      	mov	r6, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	4605      	mov	r5, r0
 80039c0:	b118      	cbz	r0, 80039ca <__swbuf_r+0x12>
 80039c2:	6983      	ldr	r3, [r0, #24]
 80039c4:	b90b      	cbnz	r3, 80039ca <__swbuf_r+0x12>
 80039c6:	f7ff fbf7 	bl	80031b8 <__sinit>
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <__swbuf_r+0x98>)
 80039cc:	429c      	cmp	r4, r3
 80039ce:	d12a      	bne.n	8003a26 <__swbuf_r+0x6e>
 80039d0:	686c      	ldr	r4, [r5, #4]
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	60a3      	str	r3, [r4, #8]
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	071a      	lsls	r2, r3, #28
 80039da:	d52e      	bpl.n	8003a3a <__swbuf_r+0x82>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	b363      	cbz	r3, 8003a3a <__swbuf_r+0x82>
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	6820      	ldr	r0, [r4, #0]
 80039e4:	1ac0      	subs	r0, r0, r3
 80039e6:	6963      	ldr	r3, [r4, #20]
 80039e8:	b2f6      	uxtb	r6, r6
 80039ea:	4283      	cmp	r3, r0
 80039ec:	4637      	mov	r7, r6
 80039ee:	dc04      	bgt.n	80039fa <__swbuf_r+0x42>
 80039f0:	4621      	mov	r1, r4
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 f948 	bl	8003c88 <_fflush_r>
 80039f8:	bb28      	cbnz	r0, 8003a46 <__swbuf_r+0x8e>
 80039fa:	68a3      	ldr	r3, [r4, #8]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60a3      	str	r3, [r4, #8]
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	6022      	str	r2, [r4, #0]
 8003a06:	701e      	strb	r6, [r3, #0]
 8003a08:	6963      	ldr	r3, [r4, #20]
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	4283      	cmp	r3, r0
 8003a0e:	d004      	beq.n	8003a1a <__swbuf_r+0x62>
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	07db      	lsls	r3, r3, #31
 8003a14:	d519      	bpl.n	8003a4a <__swbuf_r+0x92>
 8003a16:	2e0a      	cmp	r6, #10
 8003a18:	d117      	bne.n	8003a4a <__swbuf_r+0x92>
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	f000 f933 	bl	8003c88 <_fflush_r>
 8003a22:	b190      	cbz	r0, 8003a4a <__swbuf_r+0x92>
 8003a24:	e00f      	b.n	8003a46 <__swbuf_r+0x8e>
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <__swbuf_r+0x9c>)
 8003a28:	429c      	cmp	r4, r3
 8003a2a:	d101      	bne.n	8003a30 <__swbuf_r+0x78>
 8003a2c:	68ac      	ldr	r4, [r5, #8]
 8003a2e:	e7d0      	b.n	80039d2 <__swbuf_r+0x1a>
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <__swbuf_r+0xa0>)
 8003a32:	429c      	cmp	r4, r3
 8003a34:	bf08      	it	eq
 8003a36:	68ec      	ldreq	r4, [r5, #12]
 8003a38:	e7cb      	b.n	80039d2 <__swbuf_r+0x1a>
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	4628      	mov	r0, r5
 8003a3e:	f000 f81f 	bl	8003a80 <__swsetup_r>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d0cc      	beq.n	80039e0 <__swbuf_r+0x28>
 8003a46:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	08003fb0 	.word	0x08003fb0
 8003a54:	08003fd0 	.word	0x08003fd0
 8003a58:	08003f90 	.word	0x08003f90

08003a5c <_write_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4c07      	ldr	r4, [pc, #28]	; (8003a7c <_write_r+0x20>)
 8003a60:	4605      	mov	r5, r0
 8003a62:	4608      	mov	r0, r1
 8003a64:	4611      	mov	r1, r2
 8003a66:	2200      	movs	r2, #0
 8003a68:	6022      	str	r2, [r4, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7fd f98f 	bl	8000d8e <_write>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_write_r+0x1e>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_write_r+0x1e>
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	200004e4 	.word	0x200004e4

08003a80 <__swsetup_r>:
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <__swsetup_r+0xcc>)
 8003a82:	b570      	push	{r4, r5, r6, lr}
 8003a84:	681d      	ldr	r5, [r3, #0]
 8003a86:	4606      	mov	r6, r0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	b125      	cbz	r5, 8003a96 <__swsetup_r+0x16>
 8003a8c:	69ab      	ldr	r3, [r5, #24]
 8003a8e:	b913      	cbnz	r3, 8003a96 <__swsetup_r+0x16>
 8003a90:	4628      	mov	r0, r5
 8003a92:	f7ff fb91 	bl	80031b8 <__sinit>
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <__swsetup_r+0xd0>)
 8003a98:	429c      	cmp	r4, r3
 8003a9a:	d10f      	bne.n	8003abc <__swsetup_r+0x3c>
 8003a9c:	686c      	ldr	r4, [r5, #4]
 8003a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	0715      	lsls	r5, r2, #28
 8003aa6:	d42c      	bmi.n	8003b02 <__swsetup_r+0x82>
 8003aa8:	06d0      	lsls	r0, r2, #27
 8003aaa:	d411      	bmi.n	8003ad0 <__swsetup_r+0x50>
 8003aac:	2209      	movs	r2, #9
 8003aae:	6032      	str	r2, [r6, #0]
 8003ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ab4:	81a3      	strh	r3, [r4, #12]
 8003ab6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aba:	e03e      	b.n	8003b3a <__swsetup_r+0xba>
 8003abc:	4b25      	ldr	r3, [pc, #148]	; (8003b54 <__swsetup_r+0xd4>)
 8003abe:	429c      	cmp	r4, r3
 8003ac0:	d101      	bne.n	8003ac6 <__swsetup_r+0x46>
 8003ac2:	68ac      	ldr	r4, [r5, #8]
 8003ac4:	e7eb      	b.n	8003a9e <__swsetup_r+0x1e>
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <__swsetup_r+0xd8>)
 8003ac8:	429c      	cmp	r4, r3
 8003aca:	bf08      	it	eq
 8003acc:	68ec      	ldreq	r4, [r5, #12]
 8003ace:	e7e6      	b.n	8003a9e <__swsetup_r+0x1e>
 8003ad0:	0751      	lsls	r1, r2, #29
 8003ad2:	d512      	bpl.n	8003afa <__swsetup_r+0x7a>
 8003ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ad6:	b141      	cbz	r1, 8003aea <__swsetup_r+0x6a>
 8003ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003adc:	4299      	cmp	r1, r3
 8003ade:	d002      	beq.n	8003ae6 <__swsetup_r+0x66>
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f973 	bl	8003dcc <_free_r>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	6363      	str	r3, [r4, #52]	; 0x34
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003af0:	81a3      	strh	r3, [r4, #12]
 8003af2:	2300      	movs	r3, #0
 8003af4:	6063      	str	r3, [r4, #4]
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f043 0308 	orr.w	r3, r3, #8
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	b94b      	cbnz	r3, 8003b1a <__swsetup_r+0x9a>
 8003b06:	89a3      	ldrh	r3, [r4, #12]
 8003b08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b10:	d003      	beq.n	8003b1a <__swsetup_r+0x9a>
 8003b12:	4621      	mov	r1, r4
 8003b14:	4630      	mov	r0, r6
 8003b16:	f000 f917 	bl	8003d48 <__smakebuf_r>
 8003b1a:	89a2      	ldrh	r2, [r4, #12]
 8003b1c:	f012 0301 	ands.w	r3, r2, #1
 8003b20:	d00c      	beq.n	8003b3c <__swsetup_r+0xbc>
 8003b22:	2300      	movs	r3, #0
 8003b24:	60a3      	str	r3, [r4, #8]
 8003b26:	6963      	ldr	r3, [r4, #20]
 8003b28:	425b      	negs	r3, r3
 8003b2a:	61a3      	str	r3, [r4, #24]
 8003b2c:	6923      	ldr	r3, [r4, #16]
 8003b2e:	b953      	cbnz	r3, 8003b46 <__swsetup_r+0xc6>
 8003b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003b38:	d1ba      	bne.n	8003ab0 <__swsetup_r+0x30>
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	0792      	lsls	r2, r2, #30
 8003b3e:	bf58      	it	pl
 8003b40:	6963      	ldrpl	r3, [r4, #20]
 8003b42:	60a3      	str	r3, [r4, #8]
 8003b44:	e7f2      	b.n	8003b2c <__swsetup_r+0xac>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e7f7      	b.n	8003b3a <__swsetup_r+0xba>
 8003b4a:	bf00      	nop
 8003b4c:	2000000c 	.word	0x2000000c
 8003b50:	08003fb0 	.word	0x08003fb0
 8003b54:	08003fd0 	.word	0x08003fd0
 8003b58:	08003f90 	.word	0x08003f90

08003b5c <_close_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4c06      	ldr	r4, [pc, #24]	; (8003b78 <_close_r+0x1c>)
 8003b60:	2300      	movs	r3, #0
 8003b62:	4605      	mov	r5, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	f7fd f92d 	bl	8000dc6 <_close>
 8003b6c:	1c43      	adds	r3, r0, #1
 8003b6e:	d102      	bne.n	8003b76 <_close_r+0x1a>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	b103      	cbz	r3, 8003b76 <_close_r+0x1a>
 8003b74:	602b      	str	r3, [r5, #0]
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	200004e4 	.word	0x200004e4

08003b7c <__sflush_r>:
 8003b7c:	898a      	ldrh	r2, [r1, #12]
 8003b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	4605      	mov	r5, r0
 8003b84:	0710      	lsls	r0, r2, #28
 8003b86:	460c      	mov	r4, r1
 8003b88:	d458      	bmi.n	8003c3c <__sflush_r+0xc0>
 8003b8a:	684b      	ldr	r3, [r1, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dc05      	bgt.n	8003b9c <__sflush_r+0x20>
 8003b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	dc02      	bgt.n	8003b9c <__sflush_r+0x20>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b9e:	2e00      	cmp	r6, #0
 8003ba0:	d0f9      	beq.n	8003b96 <__sflush_r+0x1a>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ba8:	682f      	ldr	r7, [r5, #0]
 8003baa:	6a21      	ldr	r1, [r4, #32]
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	d032      	beq.n	8003c16 <__sflush_r+0x9a>
 8003bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	075a      	lsls	r2, r3, #29
 8003bb6:	d505      	bpl.n	8003bc4 <__sflush_r+0x48>
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	1ac0      	subs	r0, r0, r3
 8003bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bbe:	b10b      	cbz	r3, 8003bc4 <__sflush_r+0x48>
 8003bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bc2:	1ac0      	subs	r0, r0, r3
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bca:	6a21      	ldr	r1, [r4, #32]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	47b0      	blx	r6
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	89a3      	ldrh	r3, [r4, #12]
 8003bd4:	d106      	bne.n	8003be4 <__sflush_r+0x68>
 8003bd6:	6829      	ldr	r1, [r5, #0]
 8003bd8:	291d      	cmp	r1, #29
 8003bda:	d848      	bhi.n	8003c6e <__sflush_r+0xf2>
 8003bdc:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <__sflush_r+0x108>)
 8003bde:	40ca      	lsrs	r2, r1
 8003be0:	07d6      	lsls	r6, r2, #31
 8003be2:	d544      	bpl.n	8003c6e <__sflush_r+0xf2>
 8003be4:	2200      	movs	r2, #0
 8003be6:	6062      	str	r2, [r4, #4]
 8003be8:	04d9      	lsls	r1, r3, #19
 8003bea:	6922      	ldr	r2, [r4, #16]
 8003bec:	6022      	str	r2, [r4, #0]
 8003bee:	d504      	bpl.n	8003bfa <__sflush_r+0x7e>
 8003bf0:	1c42      	adds	r2, r0, #1
 8003bf2:	d101      	bne.n	8003bf8 <__sflush_r+0x7c>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b903      	cbnz	r3, 8003bfa <__sflush_r+0x7e>
 8003bf8:	6560      	str	r0, [r4, #84]	; 0x54
 8003bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bfc:	602f      	str	r7, [r5, #0]
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	d0c9      	beq.n	8003b96 <__sflush_r+0x1a>
 8003c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d002      	beq.n	8003c10 <__sflush_r+0x94>
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 f8de 	bl	8003dcc <_free_r>
 8003c10:	2000      	movs	r0, #0
 8003c12:	6360      	str	r0, [r4, #52]	; 0x34
 8003c14:	e7c0      	b.n	8003b98 <__sflush_r+0x1c>
 8003c16:	2301      	movs	r3, #1
 8003c18:	4628      	mov	r0, r5
 8003c1a:	47b0      	blx	r6
 8003c1c:	1c41      	adds	r1, r0, #1
 8003c1e:	d1c8      	bne.n	8003bb2 <__sflush_r+0x36>
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0c5      	beq.n	8003bb2 <__sflush_r+0x36>
 8003c26:	2b1d      	cmp	r3, #29
 8003c28:	d001      	beq.n	8003c2e <__sflush_r+0xb2>
 8003c2a:	2b16      	cmp	r3, #22
 8003c2c:	d101      	bne.n	8003c32 <__sflush_r+0xb6>
 8003c2e:	602f      	str	r7, [r5, #0]
 8003c30:	e7b1      	b.n	8003b96 <__sflush_r+0x1a>
 8003c32:	89a3      	ldrh	r3, [r4, #12]
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	e7ad      	b.n	8003b98 <__sflush_r+0x1c>
 8003c3c:	690f      	ldr	r7, [r1, #16]
 8003c3e:	2f00      	cmp	r7, #0
 8003c40:	d0a9      	beq.n	8003b96 <__sflush_r+0x1a>
 8003c42:	0793      	lsls	r3, r2, #30
 8003c44:	680e      	ldr	r6, [r1, #0]
 8003c46:	bf08      	it	eq
 8003c48:	694b      	ldreq	r3, [r1, #20]
 8003c4a:	600f      	str	r7, [r1, #0]
 8003c4c:	bf18      	it	ne
 8003c4e:	2300      	movne	r3, #0
 8003c50:	eba6 0807 	sub.w	r8, r6, r7
 8003c54:	608b      	str	r3, [r1, #8]
 8003c56:	f1b8 0f00 	cmp.w	r8, #0
 8003c5a:	dd9c      	ble.n	8003b96 <__sflush_r+0x1a>
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	463a      	mov	r2, r7
 8003c60:	6a21      	ldr	r1, [r4, #32]
 8003c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b0      	blx	r6
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	dc06      	bgt.n	8003c7a <__sflush_r+0xfe>
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c78:	e78e      	b.n	8003b98 <__sflush_r+0x1c>
 8003c7a:	4407      	add	r7, r0
 8003c7c:	eba8 0800 	sub.w	r8, r8, r0
 8003c80:	e7e9      	b.n	8003c56 <__sflush_r+0xda>
 8003c82:	bf00      	nop
 8003c84:	20400001 	.word	0x20400001

08003c88 <_fflush_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	690b      	ldr	r3, [r1, #16]
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	b1db      	cbz	r3, 8003cca <_fflush_r+0x42>
 8003c92:	b118      	cbz	r0, 8003c9c <_fflush_r+0x14>
 8003c94:	6983      	ldr	r3, [r0, #24]
 8003c96:	b90b      	cbnz	r3, 8003c9c <_fflush_r+0x14>
 8003c98:	f7ff fa8e 	bl	80031b8 <__sinit>
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <_fflush_r+0x48>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d109      	bne.n	8003cb6 <_fflush_r+0x2e>
 8003ca2:	686c      	ldr	r4, [r5, #4]
 8003ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca8:	b17b      	cbz	r3, 8003cca <_fflush_r+0x42>
 8003caa:	4621      	mov	r1, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cb2:	f7ff bf63 	b.w	8003b7c <__sflush_r>
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_fflush_r+0x4c>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	d101      	bne.n	8003cc0 <_fflush_r+0x38>
 8003cbc:	68ac      	ldr	r4, [r5, #8]
 8003cbe:	e7f1      	b.n	8003ca4 <_fflush_r+0x1c>
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <_fflush_r+0x50>)
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	bf08      	it	eq
 8003cc6:	68ec      	ldreq	r4, [r5, #12]
 8003cc8:	e7ec      	b.n	8003ca4 <_fflush_r+0x1c>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003fb0 	.word	0x08003fb0
 8003cd4:	08003fd0 	.word	0x08003fd0
 8003cd8:	08003f90 	.word	0x08003f90

08003cdc <_lseek_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4c07      	ldr	r4, [pc, #28]	; (8003cfc <_lseek_r+0x20>)
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	6022      	str	r2, [r4, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f7fd f892 	bl	8000e14 <_lseek>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_lseek_r+0x1e>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_lseek_r+0x1e>
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	200004e4 	.word	0x200004e4

08003d00 <__swhatbuf_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460e      	mov	r6, r1
 8003d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	b096      	sub	sp, #88	; 0x58
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	da07      	bge.n	8003d22 <__swhatbuf_r+0x22>
 8003d12:	2300      	movs	r3, #0
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	89b3      	ldrh	r3, [r6, #12]
 8003d18:	061a      	lsls	r2, r3, #24
 8003d1a:	d410      	bmi.n	8003d3e <__swhatbuf_r+0x3e>
 8003d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d20:	e00e      	b.n	8003d40 <__swhatbuf_r+0x40>
 8003d22:	466a      	mov	r2, sp
 8003d24:	f000 f8b2 	bl	8003e8c <_fstat_r>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	dbf2      	blt.n	8003d12 <__swhatbuf_r+0x12>
 8003d2c:	9a01      	ldr	r2, [sp, #4]
 8003d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003d36:	425a      	negs	r2, r3
 8003d38:	415a      	adcs	r2, r3
 8003d3a:	602a      	str	r2, [r5, #0]
 8003d3c:	e7ee      	b.n	8003d1c <__swhatbuf_r+0x1c>
 8003d3e:	2340      	movs	r3, #64	; 0x40
 8003d40:	2000      	movs	r0, #0
 8003d42:	6023      	str	r3, [r4, #0]
 8003d44:	b016      	add	sp, #88	; 0x58
 8003d46:	bd70      	pop	{r4, r5, r6, pc}

08003d48 <__smakebuf_r>:
 8003d48:	898b      	ldrh	r3, [r1, #12]
 8003d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003d4c:	079d      	lsls	r5, r3, #30
 8003d4e:	4606      	mov	r6, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	d507      	bpl.n	8003d64 <__smakebuf_r+0x1c>
 8003d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	6123      	str	r3, [r4, #16]
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	6163      	str	r3, [r4, #20]
 8003d60:	b002      	add	sp, #8
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	ab01      	add	r3, sp, #4
 8003d66:	466a      	mov	r2, sp
 8003d68:	f7ff ffca 	bl	8003d00 <__swhatbuf_r>
 8003d6c:	9900      	ldr	r1, [sp, #0]
 8003d6e:	4605      	mov	r5, r0
 8003d70:	4630      	mov	r0, r6
 8003d72:	f7ff faab 	bl	80032cc <_malloc_r>
 8003d76:	b948      	cbnz	r0, 8003d8c <__smakebuf_r+0x44>
 8003d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d7c:	059a      	lsls	r2, r3, #22
 8003d7e:	d4ef      	bmi.n	8003d60 <__smakebuf_r+0x18>
 8003d80:	f023 0303 	bic.w	r3, r3, #3
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	e7e3      	b.n	8003d54 <__smakebuf_r+0xc>
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <__smakebuf_r+0x7c>)
 8003d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	6020      	str	r0, [r4, #0]
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	6163      	str	r3, [r4, #20]
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	6120      	str	r0, [r4, #16]
 8003da2:	b15b      	cbz	r3, 8003dbc <__smakebuf_r+0x74>
 8003da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f881 	bl	8003eb0 <_isatty_r>
 8003dae:	b128      	cbz	r0, 8003dbc <__smakebuf_r+0x74>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	431d      	orrs	r5, r3
 8003dc0:	81a5      	strh	r5, [r4, #12]
 8003dc2:	e7cd      	b.n	8003d60 <__smakebuf_r+0x18>
 8003dc4:	08003181 	.word	0x08003181

08003dc8 <__malloc_lock>:
 8003dc8:	4770      	bx	lr

08003dca <__malloc_unlock>:
 8003dca:	4770      	bx	lr

08003dcc <_free_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d045      	beq.n	8003e60 <_free_r+0x94>
 8003dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd8:	1f0c      	subs	r4, r1, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	18e4      	addlt	r4, r4, r3
 8003de0:	f7ff fff2 	bl	8003dc8 <__malloc_lock>
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <_free_r+0x98>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	4610      	mov	r0, r2
 8003dea:	b933      	cbnz	r3, 8003dfa <_free_r+0x2e>
 8003dec:	6063      	str	r3, [r4, #4]
 8003dee:	6014      	str	r4, [r2, #0]
 8003df0:	4628      	mov	r0, r5
 8003df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df6:	f7ff bfe8 	b.w	8003dca <__malloc_unlock>
 8003dfa:	42a3      	cmp	r3, r4
 8003dfc:	d90c      	bls.n	8003e18 <_free_r+0x4c>
 8003dfe:	6821      	ldr	r1, [r4, #0]
 8003e00:	1862      	adds	r2, r4, r1
 8003e02:	4293      	cmp	r3, r2
 8003e04:	bf04      	itt	eq
 8003e06:	681a      	ldreq	r2, [r3, #0]
 8003e08:	685b      	ldreq	r3, [r3, #4]
 8003e0a:	6063      	str	r3, [r4, #4]
 8003e0c:	bf04      	itt	eq
 8003e0e:	1852      	addeq	r2, r2, r1
 8003e10:	6022      	streq	r2, [r4, #0]
 8003e12:	6004      	str	r4, [r0, #0]
 8003e14:	e7ec      	b.n	8003df0 <_free_r+0x24>
 8003e16:	4613      	mov	r3, r2
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	b10a      	cbz	r2, 8003e20 <_free_r+0x54>
 8003e1c:	42a2      	cmp	r2, r4
 8003e1e:	d9fa      	bls.n	8003e16 <_free_r+0x4a>
 8003e20:	6819      	ldr	r1, [r3, #0]
 8003e22:	1858      	adds	r0, r3, r1
 8003e24:	42a0      	cmp	r0, r4
 8003e26:	d10b      	bne.n	8003e40 <_free_r+0x74>
 8003e28:	6820      	ldr	r0, [r4, #0]
 8003e2a:	4401      	add	r1, r0
 8003e2c:	1858      	adds	r0, r3, r1
 8003e2e:	4282      	cmp	r2, r0
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	d1dd      	bne.n	8003df0 <_free_r+0x24>
 8003e34:	6810      	ldr	r0, [r2, #0]
 8003e36:	6852      	ldr	r2, [r2, #4]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	4401      	add	r1, r0
 8003e3c:	6019      	str	r1, [r3, #0]
 8003e3e:	e7d7      	b.n	8003df0 <_free_r+0x24>
 8003e40:	d902      	bls.n	8003e48 <_free_r+0x7c>
 8003e42:	230c      	movs	r3, #12
 8003e44:	602b      	str	r3, [r5, #0]
 8003e46:	e7d3      	b.n	8003df0 <_free_r+0x24>
 8003e48:	6820      	ldr	r0, [r4, #0]
 8003e4a:	1821      	adds	r1, r4, r0
 8003e4c:	428a      	cmp	r2, r1
 8003e4e:	bf04      	itt	eq
 8003e50:	6811      	ldreq	r1, [r2, #0]
 8003e52:	6852      	ldreq	r2, [r2, #4]
 8003e54:	6062      	str	r2, [r4, #4]
 8003e56:	bf04      	itt	eq
 8003e58:	1809      	addeq	r1, r1, r0
 8003e5a:	6021      	streq	r1, [r4, #0]
 8003e5c:	605c      	str	r4, [r3, #4]
 8003e5e:	e7c7      	b.n	8003df0 <_free_r+0x24>
 8003e60:	bd38      	pop	{r3, r4, r5, pc}
 8003e62:	bf00      	nop
 8003e64:	20000090 	.word	0x20000090

08003e68 <_read_r>:
 8003e68:	b538      	push	{r3, r4, r5, lr}
 8003e6a:	4c07      	ldr	r4, [pc, #28]	; (8003e88 <_read_r+0x20>)
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	4608      	mov	r0, r1
 8003e70:	4611      	mov	r1, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	6022      	str	r2, [r4, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f7fc ff6c 	bl	8000d54 <_read>
 8003e7c:	1c43      	adds	r3, r0, #1
 8003e7e:	d102      	bne.n	8003e86 <_read_r+0x1e>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	b103      	cbz	r3, 8003e86 <_read_r+0x1e>
 8003e84:	602b      	str	r3, [r5, #0]
 8003e86:	bd38      	pop	{r3, r4, r5, pc}
 8003e88:	200004e4 	.word	0x200004e4

08003e8c <_fstat_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	4c07      	ldr	r4, [pc, #28]	; (8003eac <_fstat_r+0x20>)
 8003e90:	2300      	movs	r3, #0
 8003e92:	4605      	mov	r5, r0
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	f7fc ffa0 	bl	8000dde <_fstat>
 8003e9e:	1c43      	adds	r3, r0, #1
 8003ea0:	d102      	bne.n	8003ea8 <_fstat_r+0x1c>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	b103      	cbz	r3, 8003ea8 <_fstat_r+0x1c>
 8003ea6:	602b      	str	r3, [r5, #0]
 8003ea8:	bd38      	pop	{r3, r4, r5, pc}
 8003eaa:	bf00      	nop
 8003eac:	200004e4 	.word	0x200004e4

08003eb0 <_isatty_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4c06      	ldr	r4, [pc, #24]	; (8003ecc <_isatty_r+0x1c>)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	4608      	mov	r0, r1
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	f7fc ff9f 	bl	8000dfe <_isatty>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d102      	bne.n	8003eca <_isatty_r+0x1a>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	b103      	cbz	r3, 8003eca <_isatty_r+0x1a>
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	bd38      	pop	{r3, r4, r5, pc}
 8003ecc:	200004e4 	.word	0x200004e4

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
